{"version":3,"file":"static/js/main.f5efa333.js","mappings":"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","sources":["src/factory/index.ts","src/env.ts","src/hooks/useAppearance.tsx","src/libs/navigation.ts","src/libs/authentication.ts","src/libs/notification.ts","src/libs/utils.ts","src/screens/theme/ThemeColorsScreen.tsx","src/screens/theme/PaletteScreen.tsx","src/hooks/useAppNavigation.ts","src/screens/uikit/SettingsScreen.tsx","src/screens/uikit/groupChannel/GroupChannelTabs/GroupChannelListScreen.tsx","src/screens/uikit/groupChannel/GroupChannelTabs/index.tsx","src/screens/uikit/groupChannel/GroupChannelScreen.tsx","src/screens/uikit/groupChannel/GroupChannelSettingsScreen.tsx","src/screens/uikit/groupChannel/GroupChannelCreateScreen.tsx","src/screens/uikit/groupChannel/GroupChannelInviteScreen.tsx","src/screens/uikit/groupChannel/GroupChannelMembersScreen.tsx","src/screens/uikit/groupChannel/GroupChannelModerationScreen.tsx","src/screens/uikit/groupChannel/GroupChannelOperatorsScreen.tsx","src/screens/uikit/groupChannel/GroupChannelRegisterOperatorScreen.tsx","src/screens/uikit/groupChannel/GroupChannelMutedMembersScreen.tsx","src/screens/uikit/groupChannel/GroupChannelBannedUsersScreen.tsx","src/screens/uikit/groupChannel/GroupChannelNotificationsScreen.tsx","src/libs/openChannel.ts","src/screens/uikit/openChannel/OpenChannelTabs/OpenChannelListCommunityScreen.tsx","src/screens/uikit/openChannel/OpenChannelTabs/OpenChannelListLiveStreamsScreen.tsx","src/screens/uikit/openChannel/OpenChannelTabs/index.tsx","src/screens/uikit/openChannel/OpenChannelScreen.tsx","src/screens/uikit/openChannel/OpenChannelLiveStreamScreen.tsx","src/screens/uikit/openChannel/OpenChannelParticipantsScreen.tsx","src/screens/uikit/openChannel/OpenChannelSettingsScreen.tsx","src/screens/uikit/openChannel/OpenChannelCreateScreen.tsx","src/screens/uikit/openChannel/OpenChannelModerationScreen.tsx","src/screens/uikit/openChannel/OpenChannelBannedUsersScreen.tsx","src/screens/uikit/openChannel/OpenChannelMutedParticipantsScreen.tsx","src/screens/uikit/openChannel/OpenChannelOperatorsScreen.tsx","src/screens/uikit/openChannel/OpenChannelRegisterOperatorScreen.tsx","src/screens/uikit/FileViewerScreen.tsx","src/screens/uikit/MessageSearchScreen.tsx","src/hooks/useVersions.ts","src/components/Versions.tsx","src/screens/SignInScreen.tsx","src/components/HomeListItem.tsx","src/screens/HomeScreen.tsx","src/screens/ErrorInfoScreen.tsx","src/App.tsx","App.js","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/create fake namespace object","webpack/runtime/define property getters","webpack/runtime/ensure chunk","webpack/runtime/get javascript chunk filename","webpack/runtime/get mini-css chunk filename","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/load script","webpack/runtime/make namespace object","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import { createNativeStackNavigator } from \"@react-navigation/native-stack\";\nimport * as ExpoClipboard from \"expo-clipboard\";\nimport * as ExpoDocumentPicker from \"expo-document-picker\";\nimport * as ExpoFS from \"expo-file-system\";\nimport * as ExpoImagePicker from \"expo-image-picker\";\nimport * as ExpoMediaLibrary from \"expo-media-library\";\nimport * as ExpoNotifications from \"expo-notifications\";\nimport * as ExpoAV from \"expo-av\";\nimport * as ExpoVideoThumbnail from \"expo-video-thumbnails\";\nimport * as ExpoImageManipulator from \"expo-image-manipulator\";\n\nimport axios from \"axios\";\nimport { Platform, StatusBar } from \"react-native\";\n\nimport {\n  createExpoClipboardService,\n  createExpoFileService,\n  createExpoMediaService,\n  createExpoNotificationService,\n} from \"@sendbird/uikit-react-native\";\nimport { Logger, SendbirdChatSDK } from \"@sendbird/uikit-utils\";\n\nimport { APP_ID } from \"../env\";\n\nlet AppSendbirdSDK: SendbirdChatSDK;\nexport const GetSendbirdSDK = () => AppSendbirdSDK;\nexport const SetSendbirdSDK = (sdk: SendbirdChatSDK) => (AppSendbirdSDK = sdk);\n\nexport const RootStack = createNativeStackNavigator();\nexport const NotificationService =\n  createExpoNotificationService(ExpoNotifications);\nexport const ClipboardService = createExpoClipboardService(ExpoClipboard);\nexport const FileService = createExpoFileService({\n  fsModule: ExpoFS,\n  imagePickerModule: ExpoImagePicker,\n  mediaLibraryModule: ExpoMediaLibrary,\n  documentPickerModule: ExpoDocumentPicker,\n});\nexport const MediaService = createExpoMediaService({\n  avModule: ExpoAV,\n  thumbnailModule: ExpoVideoThumbnail,\n  imageManipulator: ExpoImageManipulator,\n  fsModule: ExpoFS,\n});\nexport const GetTranslucent = (state = true) => {\n  Platform.OS === \"android\" && StatusBar.setTranslucent(state);\n  return Platform.select({ ios: state, android: state });\n};\n\nconst createSendbirdFetcher = (appId: string, apiToken: string) => {\n  const client = axios.create({\n    baseURL: `https://api-${appId}.sendbird.com/v3`,\n    headers: { \"Api-Token\": apiToken },\n  });\n  client.interceptors.response.use((res) => res.data);\n  return client;\n};\n\nconst createSendbirdAPI = (appId: string, apiToken: string) => {\n  const fetcher = createSendbirdFetcher(appId, apiToken);\n  const MIN = 60 * 1000;\n  return {\n    getSessionToken(\n      userId: string,\n      expires_at = Date.now() + 10 * MIN\n    ): Promise<{ user_id: string; token: string; expires_at: number }> {\n      return fetcher.post(`/users/${userId}/token`, { expires_at });\n    },\n  };\n};\n\n/**\n * API_TOKEN - {@link https://sendbird.com/docs/chat/v3/platform-api/prepare-to-use-api#2-authentication}\n * This is sample code for testing or example.\n * We recommend higher that you use sendbird platform api on your server instead of the client side.\n * */\nexport const SendbirdAPI = createSendbirdAPI(APP_ID, \"API_TOKEN\");\n\nif (__DEV__) {\n  const PromiseLogger = Logger.create(\"debug\");\n  PromiseLogger.setTitle(\"[UIKit/promiseUnhandled]\");\n  const opts =\n    require(\"react-native/Libraries/promiseRejectionTrackingOptions\").default;\n\n  // const originHandler = opts.onUnhandled;\n  opts.onUnhandled = (_: number, rejection = { code: undefined }) => {\n    PromiseLogger.log(rejection, rejection.code ?? \"\");\n    // originHandler(_, rejection);\n  };\n\n  require(\"promise/setimmediate/rejection-tracking\").enable(opts);\n}\n","export const APP_ID = \"2D7B4CDB-932F-4082-9B09-A1153792DC8D\";\nexport const API_TOKEN = \"\";\n","import AsyncStorage from '@react-native-async-storage/async-storage';\nimport React, { createContext, useContext, useState } from 'react';\nimport { Appearance } from 'react-native';\n\nimport { NOOP, useAsyncLayoutEffect } from '@sendbird/uikit-utils';\n\nconst DEFAULT_APPEARANCE = 'light';\n\nconst AppearanceContext = createContext<{ scheme: 'light' | 'dark'; setScheme: (val: 'light' | 'dark') => void }>({\n  scheme: DEFAULT_APPEARANCE,\n  setScheme: NOOP,\n});\n\nconst SchemeManager = {\n  KEY: 'sendbird@scheme',\n  async get() {\n    return ((await AsyncStorage.getItem(SchemeManager.KEY)) ?? Appearance.getColorScheme() ?? DEFAULT_APPEARANCE) as\n      | 'light'\n      | 'dark';\n  },\n  async set(scheme: 'light' | 'dark') {\n    await AsyncStorage.setItem(SchemeManager.KEY, scheme);\n  },\n};\n\nexport const AppearanceProvider = ({ children }: React.PropsWithChildren) => {\n  const [scheme, setScheme] = useState<'light' | 'dark'>(Appearance.getColorScheme() ?? DEFAULT_APPEARANCE);\n\n  useAsyncLayoutEffect(async () => {\n    setScheme(await SchemeManager.get());\n  }, []);\n\n  // Handle scheme from Settings screen.\n  // useEffect(() => {\n  //   const unsubscribe = Appearance.addChangeListener(({ colorScheme }) => setScheme(colorScheme ?? DEFAULT_APPEARANCE));\n  //   return () => unsubscribe.remove();\n  // }, []);\n\n  return (\n    <AppearanceContext.Provider\n      value={{\n        scheme,\n        setScheme: async (value) => {\n          setScheme(value);\n          await SchemeManager.set(value);\n        },\n      }}\n    >\n      {children}\n    </AppearanceContext.Provider>\n  );\n};\n\nconst useAppearance = () => {\n  return useContext(AppearanceContext);\n};\n\nexport const withAppearance = (Component: (props: object) => JSX.Element) => {\n  return (props: object) => (\n    <AppearanceProvider>\n      <Component {...props} />\n    </AppearanceProvider>\n  );\n};\n\nexport default useAppearance;\n","import {\n  Route,\n  StackActions,\n  createNavigationContainerRef,\n} from \"@react-navigation/native\";\nimport type { NativeStackNavigationProp } from \"@react-navigation/native-stack\";\n\nimport type { GroupChannelType } from \"@sendbird/uikit-react-native\";\nimport type { SendbirdChatSDK } from \"@sendbird/uikit-utils\";\n\nimport { GetSendbirdSDK } from \"../factory\";\nimport { authManager } from \"./authentication\";\n\nexport enum Routes {\n  SignIn = \"SignIn\",\n  Home = \"Home\",\n\n  Palette = \"Palette\",\n  ThemeColors = \"ThemeColors\",\n\n  OpenChannelTabs = \"OpenChannelTabs\",\n  OpenChannelListCommunity = \"OpenChannelListCommunity\",\n  OpenChannelListLiveStreams = \"OpenChannelListLiveStreams\",\n  OpenChannel = \"OpenChannel\",\n  OpenChannelLiveStream = \"OpenChannelLiveStream\",\n  OpenChannelSettings = \"OpenChannelSettings\",\n  OpenChannelParticipants = \"OpenChannelParticipants\",\n  OpenChannelCreate = \"OpenChannelCreate\",\n  OpenChannelModeration = \"OpenChannelModeration\",\n  OpenChannelMutedParticipants = \"OpenChannelMutedParticipants\",\n  OpenChannelBannedUsers = \"OpenChannelBannedUsers\",\n  OpenChannelOperators = \"OpenChannelOperators\",\n  OpenChannelRegisterOperator = \"OpenChannelRegisterOperator\",\n\n  GroupChannelTabs = \"GroupChannelTabs\",\n  GroupChannelList = \"GroupChannelList\",\n  GroupChannel = \"GroupChannel\",\n  GroupChannelSettings = \"GroupChannelSettings\",\n  GroupChannelNotifications = \"GroupChannelNotifications\",\n  GroupChannelMembers = \"GroupChannelMembers\",\n  GroupChannelModeration = \"GroupChannelModeration\",\n  GroupChannelOperators = \"GroupChannelOperators\",\n  GroupChannelRegisterOperator = \"GroupChannelRegisterOperator\",\n  GroupChannelMutedMembers = \"GroupChannelMutedMembers\",\n  GroupChannelBannedUsers = \"GroupChannelBannedUsers\",\n\n  GroupChannelCreate = \"GroupChannelCreate\",\n  GroupChannelInvite = \"GroupChannelInvite\",\n  Settings = \"Settings\",\n  FileViewer = \"FileViewer\",\n  MessageSearch = \"MessageSearch\",\n}\n\ntype ChannelUrlParams = {\n  channelUrl: string;\n};\n\nexport type RouteParamsUnion =\n  /** Shared screens **/\n  | {\n      route: Routes.SignIn;\n      params: undefined;\n    }\n  | {\n      route: Routes.Home;\n      params: undefined;\n    }\n  | {\n      route: Routes.Palette;\n      params: undefined;\n    }\n  | {\n      route: Routes.ThemeColors;\n      params: undefined;\n    }\n  | {\n      route: Routes.Settings;\n      params: undefined;\n    }\n  | {\n      route: Routes.FileViewer;\n      params: {\n        serializedFileMessage: object;\n        deleteMessage: () => Promise<void>;\n      };\n    }\n  /** GroupChannel screens **/\n  | {\n      route: Routes.GroupChannelTabs;\n      params: Partial<ChannelUrlParams> | undefined;\n    }\n  | {\n      route: Routes.GroupChannelList;\n      params: Partial<ChannelUrlParams> | undefined;\n    }\n  | {\n      route: Routes.GroupChannelCreate;\n      params: { channelType: GroupChannelType };\n    }\n  | {\n      route: Routes.GroupChannel;\n      params: {\n        channelUrl: string;\n        searchItem?: { startingPoint: number };\n      };\n    }\n  | {\n      route: Routes.GroupChannelSettings;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.GroupChannelNotifications;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.GroupChannelMembers;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.GroupChannelModeration;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.GroupChannelOperators;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.GroupChannelRegisterOperator;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.GroupChannelMutedMembers;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.GroupChannelBannedUsers;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.GroupChannelInvite;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.MessageSearch;\n      params: ChannelUrlParams;\n    }\n  /** OpenChannel screens **/\n  | {\n      route: Routes.OpenChannelTabs;\n      params: Partial<ChannelUrlParams> | undefined;\n    }\n  | {\n      route: Routes.OpenChannelListLiveStreams;\n      params: Partial<ChannelUrlParams> | undefined;\n    }\n  | {\n      route: Routes.OpenChannelListCommunity;\n      params: Partial<ChannelUrlParams> | undefined;\n    }\n  | {\n      route: Routes.OpenChannel;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.OpenChannelLiveStream;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.OpenChannelSettings;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.OpenChannelParticipants;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.OpenChannelCreate;\n      params: undefined;\n    }\n  | {\n      route: Routes.OpenChannelModeration;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.OpenChannelBannedUsers;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.OpenChannelMutedParticipants;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.OpenChannelOperators;\n      params: ChannelUrlParams;\n    }\n  | {\n      route: Routes.OpenChannelRegisterOperator;\n      params: ChannelUrlParams;\n    };\n\ntype ExtractParams<R extends Routes, U extends RouteParamsUnion> = U extends {\n  route: R;\n  params: infer P;\n}\n  ? P\n  : never;\n// type ExtractNavigatorParams<R extends Routes[]> = { [key in R[number]]: ExtractParams<key, RouteParamsUnion> };\nexport type RouteParams<R extends Routes> = ExtractParams<R, RouteParamsUnion>;\nexport type ParamListBase<T extends RouteParamsUnion = RouteParamsUnion> = {\n  [k in T[\"route\"]]: T extends { route: k; params: infer P } ? P : never;\n};\n\nexport type RouteProps<\n  T extends Routes,\n  P extends Record<string, unknown> = Record<string, string>\n> = {\n  navigation: NativeStackNavigationProp<ParamListBase, T>;\n  route: Route<T, RouteParams<T>>;\n} & P;\n\nexport type ScreenPropsNavigation<T extends Routes> =\n  RouteProps<T>[\"navigation\"];\nexport type ScreenPropsRoute<T extends Routes> = RouteProps<T>[\"route\"];\n\nexport const navigationRef = createNavigationContainerRef<ParamListBase>();\nexport const navigationActions = {\n  navigate<T extends Routes>(name: T, params: RouteParams<T>) {\n    if (navigationRef.isReady()) {\n      const currentRoute = navigationRef.getCurrentRoute();\n      if (currentRoute?.name === name) {\n        // navigationRef.setParams(params);\n        navigationRef.dispatch(StackActions.replace(name, params));\n      } else {\n        // @ts-ignore\n        navigationRef.navigate<Routes>(name, params);\n      }\n    }\n  },\n  push<T extends Routes>(name: T, params: RouteParams<T>) {\n    if (navigationRef.isReady()) {\n      navigationRef.dispatch(StackActions.push(name, params));\n    }\n  },\n  goBack() {\n    if (navigationRef.isReady()) {\n      navigationRef.goBack();\n    }\n  },\n};\n\nexport const runAfterAppReady = (\n  callback: (sdk: SendbirdChatSDK, actions: typeof navigationActions) => void\n) => {\n  const id = setInterval(async () => {\n    if (\n      navigationRef.isReady() &&\n      authManager.hasAuthentication() &&\n      GetSendbirdSDK()\n    ) {\n      const sdk = GetSendbirdSDK();\n      if (sdk.connectionState === \"OPEN\") {\n        clearInterval(id);\n        callback(sdk, navigationActions);\n      }\n    }\n  }, 250);\n};\n","import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useState } from 'react';\n\nimport { useAsyncLayoutEffect } from '@sendbird/uikit-utils';\n\ninterface SimpleCredential {\n  userId: string;\n  nickname?: string;\n}\n\ninterface CredentialStorageInterface {\n  get(): Promise<SimpleCredential | null>;\n  set(cred: SimpleCredential): Promise<void>;\n  delete(): Promise<void>;\n}\n\nclass CredentialStorage implements CredentialStorageInterface {\n  private STORAGE_KEY = 'sendbird@credential';\n  async get(): Promise<SimpleCredential | null> {\n    const cred = await AsyncStorage.getItem(this.STORAGE_KEY);\n    return cred ? JSON.parse(cred) : null;\n  }\n  async set(cred: SimpleCredential): Promise<void> {\n    return AsyncStorage.setItem(this.STORAGE_KEY, JSON.stringify(cred));\n  }\n  delete(): Promise<void> {\n    return AsyncStorage.removeItem(this.STORAGE_KEY);\n  }\n}\n\nconst createAuthManager = (credStorage: CredentialStorageInterface) => {\n  const internal: { cred: SimpleCredential | null } = { cred: null };\n  return {\n    hasAuthentication() {\n      return Boolean(internal.cred);\n    },\n    async getAuthentication() {\n      if (internal.cred) return internal.cred;\n\n      const cred = await credStorage.get();\n      if (cred) internal.cred = cred;\n\n      return internal.cred;\n    },\n    authenticate(cred: SimpleCredential) {\n      internal.cred = cred;\n      return credStorage.set(cred);\n    },\n    deAuthenticate() {\n      internal.cred = null;\n      return credStorage.delete();\n    },\n  };\n};\n\nexport const authManager = createAuthManager(new CredentialStorage());\nexport const useAppAuth = (onAutonomousSignIn?: (cred: SimpleCredential) => Promise<void>) => {\n  const [loading, setLoading] = useState(true);\n\n  useAsyncLayoutEffect(async () => {\n    await authManager\n      .getAuthentication()\n      .then(async (response) => {\n        if (response) await onAutonomousSignIn?.(response);\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  return {\n    authManager,\n    loading,\n    signIn: (cred: SimpleCredential) => authManager.authenticate(cred),\n    signOut: () => authManager.deAuthenticate(),\n  };\n};\n","import { Platform } from \"react-native\";\nimport * as TaskManager from \"expo-task-manager\";\nimport * as Notifications from \"expo-notifications\";\n\nimport {\n  isSendbirdNotification,\n  parseSendbirdNotification,\n} from \"@sendbird/uikit-utils\";\n\nimport { navigationRef, Routes, runAfterAppReady } from \"./navigation\";\n\nNotifications.setNotificationHandler({\n  handleNotification: async () => ({\n    shouldShowAlert: true,\n    shouldPlaySound: true,\n    shouldSetBadge: true,\n  }),\n});\nexport const onForeground = () => {\n  const onNotification = (notification: Notifications.NotificationResponse) => {\n    const data = notification?.notification?.request?.content?.data as any;\n    if (data && isSendbirdNotification(data)) {\n      const sendbird = parseSendbirdNotification(data);\n      runAfterAppReady(async (_, actions) => {\n        const channelUrl = sendbird.channel.channel_url;\n        if (Routes.Home === navigationRef.getCurrentRoute()?.name) {\n          actions.push(Routes.GroupChannelTabs, { channelUrl });\n        } else {\n          actions.navigate(Routes.GroupChannel, { channelUrl });\n        }\n      });\n    }\n  };\n\n  const checkAppOpenedWithNotification = async () => {\n    const response = await Notifications.getLastNotificationResponseAsync();\n    onNotification(response);\n  };\n\n  checkAppOpenedWithNotification();\n  return Notifications.addNotificationResponseReceivedListener(onNotification)\n    .remove;\n};\n\nif (Platform.OS === \"android\") {\n  // Set channel\n  const channelId = \"default\";\n  Notifications.setNotificationChannelAsync(channelId, {\n    name: \"Default Channel\",\n    importance: 4,\n  });\n\n  // Set background message handler\n  const BACKGROUND_NOTIFICATION_TASK = \"BACKGROUND-NOTIFICATION-TASK\";\n  TaskManager.defineTask(BACKGROUND_NOTIFICATION_TASK, ({ data }) => {\n    if (Platform.OS !== \"android\") return;\n\n    console.log(\"Background notification task\", data);\n\n    if (isSendbirdNotification(data)) {\n      const sendbird = parseSendbirdNotification(data);\n\n      Notifications.scheduleNotificationAsync({\n        identifier: String(sendbird.message_id),\n        content: {\n          title: `[RN]${\n            sendbird.channel.name || sendbird.sender?.name || \"Message received\"\n          }`,\n          body: sendbird.message,\n          data: data,\n        },\n        trigger: null,\n      });\n    }\n  });\n  Notifications.registerTaskAsync(BACKGROUND_NOTIFICATION_TASK);\n}\n","import type { UIKitPalette } from '@sendbird/uikit-react-native-foundation';\n\nexport const getContrastColor = (\n  color:\n    | 'transparent'\n    | `#${string}`\n    | `rgba(${number},${number},${number},${number})`\n    | `rgb(${number},${number},${number})`,\n) => {\n  if (color.startsWith('rgb')) {\n    const [r, g, b, a] = color\n      .replace(/rgba?|\\(|\\)/g, '')\n      .split(',')\n      .map((c) => Number(c ?? 0));\n    if (a < 0.2) return 'gray';\n    return (r * 299 + g * 587 + b * 114) / 1000 > 125 ? 'black' : 'white';\n  }\n\n  if (color.startsWith('#')) {\n    const [r1, r2, g1, g2, b1, b2] = color.replace('#', '');\n    const convHex = (hex1: string, hex2: string) => parseInt(hex1 + hex2, 16);\n    return (convHex(r1, r2) * 299 + convHex(g1, g2) * 587 + convHex(b1, b2) * 114) / 1000 > 125 ? 'black' : 'white';\n  }\n\n  if (color === 'transparent') return 'gray';\n  throw new Error('invalid color format:' + color);\n};\n\nexport const findColorNameFromPalette = (palette: UIKitPalette, targetHex: string) => {\n  const map = Object.entries(palette);\n  const color = map.find(([, hex]) => hex === targetHex);\n  if (!color) return 'NOT_FOUND';\n  return color[0];\n};\n","import React from 'react';\nimport { SafeAreaView, ScrollView, Text, View } from 'react-native';\n\nimport { useUIKitTheme } from '@sendbird/uikit-react-native-foundation';\n\nimport { findColorNameFromPalette, getContrastColor } from '../../libs/utils';\n\nconst ThemeColorsScreen = () => {\n  const { colors, colorScheme, select, palette } = useUIKitTheme();\n\n  const fontColor = select({ light: 'black', dark: 'white' });\n  const bgColor = select({ light: 'white', dark: 'black' });\n\n  const parseColors = (c: object, flavor?: string): React.ReactNode => {\n    return Object.entries(c).map(([name, value]) => {\n      const colorName = flavor ? `${flavor}.${name}` : name;\n\n      if (typeof value === 'object') {\n        return parseColors(value, colorName);\n      }\n\n      return (\n        <View\n          key={colorName}\n          style={{\n            backgroundColor: value,\n            height: 64,\n            justifyContent: 'space-between',\n            paddingVertical: 12,\n            paddingHorizontal: 16,\n          }}\n        >\n          <Text style={{ textAlign: 'left', color: getContrastColor(value) }}>{colorName}</Text>\n          <Text style={{ textAlign: 'right', color: getContrastColor(value) }}>\n            {`${findColorNameFromPalette(palette, value)} (${value})`}\n          </Text>\n        </View>\n      );\n    });\n  };\n\n  return (\n    <SafeAreaView>\n      <ScrollView>\n        <Text style={{ color: fontColor, backgroundColor: bgColor, textAlign: 'center', paddingVertical: 12 }}>\n          {`Theme: ${colorScheme}`}\n        </Text>\n        {parseColors(colors)}\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nexport default ThemeColorsScreen;\n","import React from 'react';\nimport { SafeAreaView, ScrollView, Text, View } from 'react-native';\n\nimport { useUIKitTheme } from '@sendbird/uikit-react-native-foundation';\n\nimport { getContrastColor } from '../../libs/utils';\n\nconst PaletteScreen = () => {\n  const { palette } = useUIKitTheme();\n  return (\n    <SafeAreaView>\n      <ScrollView>\n        {Object.entries(palette).map(([name, value]) => {\n          const color = getContrastColor(value);\n          return (\n            <View\n              key={name}\n              style={{\n                backgroundColor: value,\n                height: 64,\n                justifyContent: 'space-between',\n                paddingVertical: 12,\n                paddingHorizontal: 16,\n              }}\n            >\n              <Text style={{ textAlign: 'left', color }}>{name}</Text>\n              <Text style={{ textAlign: 'right', color }}>{value}</Text>\n            </View>\n          );\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  );\n};\n\nexport default PaletteScreen;\n","import { useNavigation, useRoute } from '@react-navigation/native';\n\nimport type { Routes, ScreenPropsNavigation, ScreenPropsRoute } from '../libs/navigation';\n\nexport const useRouteParams = <T extends Routes>() => {\n  const { params } = useRoute<ScreenPropsRoute<T>>();\n  return params as NonNullable<typeof params>;\n};\n\nexport const useAppNavigation = <T extends Routes>() => {\n  const navigation = useNavigation<ScreenPropsNavigation<T>>();\n  const params = useRouteParams<T>();\n\n  return { navigation, params };\n};\n","import React from 'react';\nimport { ScrollView, StatusBar, StyleSheet, View } from 'react-native';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nimport { usePushTrigger } from '@sendbird/uikit-chat-hooks';\nimport { SBUError, SBUUtils, useLocalization, usePlatformService, useSendbirdChat } from '@sendbird/uikit-react-native';\nimport {\n  Avatar,\n  Divider,\n  Header,\n  MenuBar,\n  MenuBarProps,\n  Switch,\n  Text,\n  useActionMenu,\n  useAlert,\n  useBottomSheet,\n  usePrompt,\n  useToast,\n  useUIKitTheme,\n} from '@sendbird/uikit-react-native-foundation';\n\nimport { useAppNavigation } from '../../hooks/useAppNavigation';\nimport useAppearance from '../../hooks/useAppearance';\nimport { useAppAuth } from '../../libs/authentication';\nimport { Routes } from '../../libs/navigation';\n\nconst SettingsScreen = () => {\n  const { navigation } = useAppNavigation<Routes.Settings>();\n  const { scheme, setScheme } = useAppearance();\n  const { left, right } = useSafeAreaInsets();\n\n  const { currentUser, sdk, updateCurrentUserInfo } = useSendbirdChat();\n  const { option, updateOption } = usePushTrigger(sdk);\n  const { fileService } = usePlatformService();\n  const { colors, palette } = useUIKitTheme();\n  const { STRINGS } = useLocalization();\n  const toast = useToast();\n  const { openSheet } = useBottomSheet();\n  const { openPrompt } = usePrompt();\n  const { openMenu } = useActionMenu();\n  const { alert } = useAlert();\n\n  const { authManager } = useAppAuth();\n\n  const onChangeNickname = () => {\n    openPrompt({\n      title: 'Change nickname',\n      submitLabel: 'Save',\n      placeholder: 'Enter name',\n      defaultValue: currentUser?.nickname ?? '',\n      onSubmit: async (nickname) => {\n        const user = await updateCurrentUserInfo(nickname);\n        await authManager.authenticate({ userId: user.userId, nickname: user.nickname });\n      },\n    });\n  };\n\n  const onChangeProfileImage = () => {\n    openMenu({\n      title: 'Change profile image',\n      menuItems: [\n        {\n          title: 'Take photo',\n          onPress: async () => {\n            const photo = await fileService.openCamera({\n              mediaType: 'photo',\n              onOpenFailure: (error) => {\n                if (error.code === SBUError.CODE.ERR_PERMISSIONS_DENIED) {\n                  alert({\n                    title: STRINGS.DIALOG.ALERT_PERMISSIONS_TITLE,\n                    message: STRINGS.DIALOG.ALERT_PERMISSIONS_MESSAGE(STRINGS.LABELS.PERMISSION_CAMERA, 'UIKitSample'),\n                    buttons: [{ text: STRINGS.DIALOG.ALERT_PERMISSIONS_OK, onPress: () => SBUUtils.openSettings() }],\n                  });\n                } else {\n                  toast.show(STRINGS.TOAST.OPEN_CAMERA_ERROR, 'error');\n                }\n              },\n            });\n\n            if (!photo) return;\n\n            await updateCurrentUserInfo(sdk.currentUser.nickname, photo);\n          },\n        },\n        {\n          title: 'Choose photo',\n          onPress: async () => {\n            const files = await fileService.openMediaLibrary({\n              selectionLimit: 1,\n              mediaType: 'photo',\n              onOpenFailure: (error) => {\n                if (error.code === SBUError.CODE.ERR_PERMISSIONS_DENIED) {\n                  alert({\n                    title: STRINGS.DIALOG.ALERT_PERMISSIONS_TITLE,\n                    message: STRINGS.DIALOG.ALERT_PERMISSIONS_MESSAGE(\n                      STRINGS.LABELS.PERMISSION_DEVICE_STORAGE,\n                      'UIKitSample',\n                    ),\n                    buttons: [{ text: STRINGS.DIALOG.ALERT_PERMISSIONS_OK, onPress: () => SBUUtils.openSettings() }],\n                  });\n                } else {\n                  toast.show(STRINGS.TOAST.OPEN_PHOTO_LIBRARY_ERROR, 'error');\n                }\n              },\n            });\n            if (!files || !files[0]) return;\n\n            await updateCurrentUserInfo(sdk.currentUser.nickname, files[0]);\n          },\n        },\n      ],\n    });\n  };\n\n  const onEdit = () => {\n    openSheet({\n      sheetItems: [\n        { title: 'Change nickname', onPress: onChangeNickname },\n        { title: 'Change profile image', onPress: onChangeProfileImage },\n      ],\n    });\n  };\n  const onToggleDisturb = async () => {\n    const isNextOff = option !== 'off';\n    await updateOption(isNextOff ? 'off' : 'all');\n  };\n  const onToggleTheme = () => {\n    const isNextDark = scheme !== 'dark';\n    StatusBar.setBarStyle(isNextDark ? 'light-content' : 'dark-content', true);\n    setScheme(isNextDark ? 'dark' : 'light');\n  };\n  const onExitToHome = async () => {\n    navigation.navigate(Routes.Home);\n  };\n\n  const menuItems: MenuBarProps[] = [\n    {\n      icon: 'theme',\n      name: 'Dark theme',\n      onPress: onToggleTheme,\n      actionItem: <Switch value={scheme === 'dark'} onChangeValue={onToggleTheme} />,\n    },\n    {\n      icon: 'notifications-filled',\n      iconBackgroundColor: palette.secondary400,\n      name: 'Do not disturb',\n      onPress: onToggleDisturb,\n      actionItem: <Switch value={option === 'off'} onChangeValue={onToggleDisturb} />,\n    },\n    {\n      icon: 'leave',\n      iconBackgroundColor: palette.error300,\n      name: 'Exit to home',\n      onPress: onExitToHome,\n    },\n  ];\n\n  if (!currentUser) return null;\n\n  return (\n    <View style={styles.container}>\n      <Header\n        title={'My settings'}\n        right={<Header.Button color={colors.primary}>{'Edit'}</Header.Button>}\n        onPressRight={onEdit}\n      />\n      <ScrollView\n        style={{ backgroundColor: colors.background }}\n        contentContainerStyle={{\n          paddingLeft: left + styles.viewContainer.paddingHorizontal,\n          paddingRight: right + styles.viewContainer.paddingHorizontal,\n        }}\n      >\n        <View style={styles.userInfoContainer}>\n          <Avatar uri={currentUser.plainProfileUrl} size={80} containerStyle={styles.avatarContainer} />\n          <Text h1 numberOfLines={1}>\n            {currentUser.nickname}\n          </Text>\n        </View>\n        <Divider />\n        <View style={styles.userIdContainer}>\n          <Text body2 color={colors.onBackground02} style={styles.userIdLabel}>\n            {'User ID'}\n          </Text>\n          <Text body3 numberOfLines={1}>\n            {currentUser.userId}\n          </Text>\n        </View>\n        <Divider />\n\n        {menuItems.map((menu) => {\n          return (\n            <MenuBar\n              variant={'contained'}\n              key={menu.name}\n              icon={menu.icon}\n              onPress={menu.onPress}\n              name={menu.name}\n              disabled={menu.disabled}\n              iconBackgroundColor={menu.iconBackgroundColor}\n              actionLabel={menu.actionLabel}\n              actionItem={menu.actionItem}\n            />\n          );\n        })}\n      </ScrollView>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { flex: 1 },\n  viewContainer: { paddingHorizontal: 16 },\n  userInfoContainer: { paddingVertical: 24, alignItems: 'center' },\n  avatarContainer: { marginBottom: 12 },\n  userIdContainer: { paddingVertical: 16 },\n  userIdLabel: { marginBottom: 4 },\n});\n\nexport default SettingsScreen;\n","import React, { useEffect } from 'react';\n\nimport { createGroupChannelListFragment } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../../hooks/useAppNavigation';\nimport { Routes } from '../../../../libs/navigation';\n\n/**\n * Example for customize navigation header with DomainContext\n * Component should return null for hide uikit header\n * @example\n * ```\n *  const UseReactNavigationHeader = () => {\n *    const { navigation } = useAppNavigation<Routes.GroupChannelList>();\n *    const fragment = useContext(GroupChannelListContexts.Fragment);\n *    const typeSelector = useContext(GroupChannelListContexts.TypeSelector);\n *\n *    useLayoutEffect(() => {\n *      navigation.setOptions({\n *        headerShown: true,\n *        headerTitle: fragment.headerTitle,\n *        headerLeft: (\n *          <TouchableOpacity onPress={typeSelector.show}>\n *            <Icon icon={'create'} />\n *          </TouchableOpacity>\n *        )\n *      })\n *    },[])\n *\n *    return null;\n *  }\n *\n *  const GroupChannelListFragment = createGroupChannelListFragment({ Header: UseReactNavigationHeader });\n *\n *  const CustomGroupChannelListScreen = () => {\n *    const navigateToGroupChannelCreateScreen = (channelType) => { ... };\n *    const navigateToGroupChannelScreen = (channel) => { ... };\n *\n *    return <GroupChannelListFragment\n *             onPressCreateChannel={navigateToGroupChannelCreateScreen}\n *             onPressChannel={navigateToGroupChannelScreen}\n *           />\n *  }\n * ```\n * */\nconst GroupChannelListFragment = createGroupChannelListFragment();\nconst GroupChannelListScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.GroupChannelList>();\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (params?.channelUrl) {\n        navigation.navigate(Routes.GroupChannel, { channelUrl: params.channelUrl });\n      }\n    }, 500);\n  }, [params?.channelUrl]);\n\n  return (\n    <GroupChannelListFragment\n      onPressCreateChannel={(channelType) => {\n        navigation.navigate(Routes.GroupChannelCreate, { channelType });\n      }}\n      onPressChannel={(channel) => {\n        navigation.navigate(Routes.GroupChannel, { channelUrl: channel.url });\n      }}\n    />\n  );\n};\n\nexport default GroupChannelListScreen;\n","import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport React from 'react';\n\nimport { useTotalUnreadMessageCount } from '@sendbird/uikit-chat-hooks';\nimport { useSendbirdChat } from '@sendbird/uikit-react-native';\nimport { Icon, useUIKitTheme } from '@sendbird/uikit-react-native-foundation';\n\nimport { useAppNavigation } from '../../../../hooks/useAppNavigation';\nimport { Routes } from '../../../../libs/navigation';\nimport SettingsScreen from '../../SettingsScreen';\nimport GroupChannelListScreen from './GroupChannelListScreen';\n\nconst Tab = createBottomTabNavigator();\n\nconst GroupChannelTabs = () => {\n  const { params } = useAppNavigation<Routes.GroupChannelTabs>();\n\n  const { colors, typography } = useUIKitTheme();\n  const { sdk } = useSendbirdChat();\n  const totalUnreadMessages = useTotalUnreadMessageCount(sdk);\n\n  return (\n    <Tab.Navigator\n      initialRouteName={Routes.GroupChannelList}\n      screenOptions={{\n        headerShown: false,\n        tabBarActiveTintColor: colors.primary,\n        tabBarLabelStyle: typography.caption2,\n      }}\n    >\n      <Tab.Screen\n        name={Routes.GroupChannelList}\n        component={GroupChannelListScreen}\n        initialParams={params}\n        options={{\n          tabBarLabel: 'Channels',\n          tabBarBadge: totalUnreadMessages === '0' ? undefined : totalUnreadMessages,\n          tabBarIcon: ({ color }) => <Icon icon={'chat-filled'} color={color} />,\n        }}\n      />\n      <Tab.Screen\n        name={Routes.Settings}\n        component={SettingsScreen}\n        options={{\n          tabBarLabel: 'My settings',\n          tabBarIcon: ({ color }) => <Icon icon={'settings-filled'} color={color} />,\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n\nexport default GroupChannelTabs;\n","import React from \"react\";\n\nimport { useGroupChannel } from \"@sendbird/uikit-chat-hooks\";\nimport {\n  createGroupChannelFragment,\n  useSendbirdChat,\n} from \"@sendbird/uikit-react-native\";\n\nimport { useAppNavigation } from \"../../../hooks/useAppNavigation\";\nimport { Routes } from \"../../../libs/navigation\";\n\n/**\n * Example for customize navigation header with DomainContext\n * Component should return null for hide uikit header\n *\n * Especially in GroupChannel (chatting view)\n * you should provide your custom header height to GroupChannel as a keyboardAvoidOffset prop\n * to fix Input component position properly (when focused)\n *\n * @example\n * ```\n * import React, { useContext, useEffect } from 'react';\n * import { Pressable } from 'react-native';\n *\n * import { useNavigation } from \"@react-navigation/native\";\n * import { useHeaderHeight } from '@react-navigation/elements';\n *\n * import { GroupChannelContexts, GroupChannelModule } from '@sendbird/uikit-react-native';\n * import { Icon } from '@sendbird/uikit-react-native-foundation';\n *\n * const UseReactNavigationHeader: GroupChannelModule['Header'] = ({ onPressHeaderRight, onPressHeaderLeft }) => {\n *   const navigation = useNavigation();\n *   const { headerTitle } = useContext(GroupChannelContexts.Fragment);\n *   useEffect(() => {\n *     navigation.setOptions({\n *       headerShown: true,\n *       headerTitleAlign: 'center',\n *       title: headerTitle,\n *       headerLeft: () => (\n *         <Pressable onPress={onPressHeaderLeft}>\n *           <Icon icon={'arrow-left'} />\n *         </Pressable>\n *       ),\n *       headerRight: () => (\n *         <Pressable onPress={onPressHeaderRight}>\n *           <Icon icon={'info'} />\n *         </Pressable>\n *       ),\n *     });\n *   }, []);\n *   return null;\n * };\n *\n * const GroupChannelFragment = createGroupChannelFragment({ Header: UseReactNavigationHeader });\n *\n * const GroupChannelScreen = () => {\n *   // ...\n *   const height = useHeaderHeight();\n *\n *   return (\n *     <GroupChannelFragment\n *       keyboardAvoidOffset={height}\n *       // ...\n *     />\n *   )\n * }\n *\n * ```\n * */\n\nconst GroupChannelFragment = createGroupChannelFragment();\n\nconst GroupChannelScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.GroupChannel>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useGroupChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <GroupChannelFragment\n      channel={channel}\n      searchItem={params.searchItem}\n      onPressMediaMessage={(fileMessage, deleteMessage) => {\n        // Navigate to media viewer\n        navigation.navigate(Routes.FileViewer, {\n          serializedFileMessage: fileMessage.serialize(),\n          deleteMessage,\n        });\n      }}\n      onChannelDeleted={() => {\n        // Should leave channel, navigate to channel list\n        navigation.navigate(Routes.GroupChannelList);\n      }}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n      onPressHeaderRight={() => {\n        // Navigate to group channel settings\n        navigation.push(Routes.GroupChannelSettings, params);\n      }}\n    />\n  );\n};\n\nexport default GroupChannelScreen;\n","import React from \"react\";\n\nimport { useGroupChannel } from \"@sendbird/uikit-chat-hooks\";\nimport {\n  createGroupChannelSettingsFragment,\n  useSendbirdChat,\n} from \"@sendbird/uikit-react-native\";\n\nimport { useAppNavigation } from \"../../../hooks/useAppNavigation\";\nimport { Routes } from \"../../../libs/navigation\";\n\nconst GroupChannelSettingsFragment = createGroupChannelSettingsFragment();\nconst GroupChannelSettingsScreen = () => {\n  const { navigation, params } =\n    useAppNavigation<Routes.GroupChannelSettings>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useGroupChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <GroupChannelSettingsFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n      onPressMenuModeration={() => {\n        // Navigate to group channel moderation\n        navigation.push(Routes.GroupChannelModeration, params);\n      }}\n      onPressMenuSearchInChannel={() => {\n        // Navigate to group channel message search\n        navigation.push(Routes.MessageSearch, params);\n      }}\n      onPressMenuMembers={() => {\n        // Navigate to group channel members\n        navigation.push(Routes.GroupChannelMembers, params);\n      }}\n      onPressMenuLeaveChannel={() => {\n        // Navigate to group channel list\n        navigation.navigate(Routes.GroupChannelList);\n      }}\n      onPressMenuNotification={() => {\n        // Navigate to group channel notifications\n        navigation.navigate(Routes.GroupChannelNotifications, params);\n      }}\n    />\n  );\n};\n\nexport default GroupChannelSettingsScreen;\n","import React from 'react';\n\nimport { createGroupChannelCreateFragment } from '@sendbird/uikit-react-native';\nimport type { SendbirdUser } from '@sendbird/uikit-utils';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport { Routes } from '../../../libs/navigation';\n\nconst GroupChannelCreateFragment = createGroupChannelCreateFragment<SendbirdUser>();\n\nconst GroupChannelCreateScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.GroupChannelCreate>();\n\n  return (\n    <GroupChannelCreateFragment\n      channelType={params.channelType}\n      onBeforeCreateChannel={(channelParams) => {\n        // Customize channel params before create\n        return channelParams;\n      }}\n      onCreateChannel={async (channel) => {\n        // Navigate to created group channel\n        navigation.replace(Routes.GroupChannel, { channelUrl: channel.url });\n      }}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n    />\n  );\n};\n\nexport default GroupChannelCreateScreen;\n","import React from 'react';\n\nimport { useGroupChannel } from '@sendbird/uikit-chat-hooks';\nimport { createGroupChannelInviteFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\nimport type { SendbirdUser } from '@sendbird/uikit-utils';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport { Routes } from '../../../libs/navigation';\n\nconst GroupChannelInviteFragment = createGroupChannelInviteFragment<SendbirdUser>();\n\nconst GroupChannelInviteScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.GroupChannelInvite>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useGroupChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <GroupChannelInviteFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        navigation.goBack();\n      }}\n      onInviteMembers={(channel) => {\n        navigation.navigate(Routes.GroupChannel, { channelUrl: channel.url });\n      }}\n    />\n  );\n};\n\nexport default GroupChannelInviteScreen;\n","import React from 'react';\n\nimport { useGroupChannel } from '@sendbird/uikit-chat-hooks';\nimport { createGroupChannelMembersFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport { Routes } from '../../../libs/navigation';\n\nconst GroupChannelMembersFragment = createGroupChannelMembersFragment();\n\nconst GroupChannelMembersScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.GroupChannelInvite>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useGroupChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <GroupChannelMembersFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        navigation.goBack();\n      }}\n      onPressHeaderRight={() => {\n        navigation.push(Routes.GroupChannelInvite, params);\n      }}\n    />\n  );\n};\n\nexport default GroupChannelMembersScreen;\n","import React from 'react';\n\nimport { useGroupChannel } from '@sendbird/uikit-chat-hooks';\nimport { createGroupChannelModerationFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport { Routes } from '../../../libs/navigation';\n\nconst GroupChannelModerationFragment = createGroupChannelModerationFragment();\nconst GroupChannelModerationScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.GroupChannelModeration>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useGroupChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <GroupChannelModerationFragment\n      channel={channel}\n      onPressMenuOperators={() => {\n        // Navigate to group channel operators\n        navigation.push(Routes.GroupChannelOperators, params);\n      }}\n      onPressMenuMutedMembers={() => {\n        // Navigate to group channel muted members\n        navigation.push(Routes.GroupChannelMutedMembers, params);\n      }}\n      onPressMenuBannedUsers={() => {\n        // Navigate to group channel banned users\n        navigation.push(Routes.GroupChannelBannedUsers, params);\n      }}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n    />\n  );\n};\n\nexport default GroupChannelModerationScreen;\n","import React from 'react';\n\nimport { useGroupChannel } from '@sendbird/uikit-chat-hooks';\nimport { createGroupChannelOperatorsFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport { Routes } from '../../../libs/navigation';\n\nconst GroupChannelOperatorsFragment = createGroupChannelOperatorsFragment();\nconst GroupChannelOperatorsScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.GroupChannelOperators>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useGroupChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <GroupChannelOperatorsFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n      onPressHeaderRight={() => {\n        // Navigate to group channel set as operators\n        navigation.navigate(Routes.GroupChannelRegisterOperator, params);\n      }}\n    />\n  );\n};\n\nexport default GroupChannelOperatorsScreen;\n","import React from 'react';\n\nimport { useGroupChannel } from '@sendbird/uikit-chat-hooks';\nimport { createGroupChannelRegisterOperatorFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport { Routes } from '../../../libs/navigation';\n\nconst GroupChannelRegisterOperatorFragment = createGroupChannelRegisterOperatorFragment();\nconst GroupChannelRegisterOperatorScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.GroupChannelRegisterOperator>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useGroupChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <GroupChannelRegisterOperatorFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n      onPressHeaderRight={() => {\n        // Navigate to group channel operators\n        navigation.navigate(Routes.GroupChannelOperators, params);\n      }}\n    />\n  );\n};\n\nexport default GroupChannelRegisterOperatorScreen;\n","import React from 'react';\n\nimport { useGroupChannel } from '@sendbird/uikit-chat-hooks';\nimport { createGroupChannelMutedMembersFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport type { Routes } from '../../../libs/navigation';\n\nconst GroupChannelMutedMembersFragment = createGroupChannelMutedMembersFragment();\nconst GroupChannelMutedMembersScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.GroupChannelMutedMembers>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useGroupChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <GroupChannelMutedMembersFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n    />\n  );\n};\n\nexport default GroupChannelMutedMembersScreen;\n","import React from 'react';\n\nimport { useGroupChannel } from '@sendbird/uikit-chat-hooks';\nimport { createGroupChannelBannedUsersFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport type { Routes } from '../../../libs/navigation';\n\nconst GroupChannelBannedUsersFragment = createGroupChannelBannedUsersFragment();\nconst GroupChannelBannedUsersScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.GroupChannelBannedUsers>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useGroupChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <GroupChannelBannedUsersFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n    />\n  );\n};\n\nexport default GroupChannelBannedUsersScreen;\n","import React from 'react';\n\nimport { useGroupChannel } from '@sendbird/uikit-chat-hooks';\nimport { useSendbirdChat } from '@sendbird/uikit-react-native';\nimport { createGroupChannelNotificationsFragment } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport type { Routes } from '../../../libs/navigation';\n\nconst GroupChannelNotificationsFragment = createGroupChannelNotificationsFragment();\nconst GroupChannelNotificationsScreen = () => {\n  const { params, navigation } = useAppNavigation<Routes.GroupChannelNotifications>();\n  const { sdk } = useSendbirdChat();\n  const { channel } = useGroupChannel(sdk, params.channelUrl);\n\n  if (!channel) return null;\n\n  return (\n    <GroupChannelNotificationsFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        navigation.goBack();\n      }}\n    />\n  );\n};\n\nexport default GroupChannelNotificationsScreen;\n","export enum OpenChannelCustomType {\n  LIVE = 'SB_LIVE_TYPE',\n  COMMUNITY = 'SB_COMMUNITY_TYPE',\n}\n\nexport function parseStreamData(data: string) {\n  try {\n    return JSON.parse(data) as {\n      creator_info: { id: string; name: string; profile_url: string };\n      live_channel_url: string;\n      name: string;\n      tags: string[];\n      thumbnail_url: string;\n    };\n  } catch {\n    return null;\n  }\n}\n","import React from 'react';\n\nimport { createOpenChannelListFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\nimport { Icon, useHeaderStyle } from '@sendbird/uikit-react-native-foundation';\n\nimport { useAppNavigation } from '../../../../hooks/useAppNavigation';\nimport { Routes } from '../../../../libs/navigation';\nimport { OpenChannelCustomType } from '../../../../libs/openChannel';\n\nconst OpenChannelListFragment = createOpenChannelListFragment({\n  Header: ({ onPressHeaderRight }) => {\n    const { HeaderComponent } = useHeaderStyle();\n    return <HeaderComponent title={'Community'} right={<Icon icon={'create'} />} onPressRight={onPressHeaderRight} />;\n  },\n});\nconst OpenChannelListCommunityScreen = () => {\n  const { sdk } = useSendbirdChat();\n  const { navigation } = useAppNavigation<Routes.OpenChannelListCommunity>();\n\n  return (\n    <OpenChannelListFragment\n      onPressCreateChannel={() => {\n        // Navigating to open channel create\n        navigation.navigate(Routes.OpenChannelCreate);\n      }}\n      onPressChannel={(channel) => {\n        // Navigating to open channel\n        navigation.navigate(Routes.OpenChannel, { channelUrl: channel.url });\n      }}\n      queryCreator={() => {\n        return sdk.openChannel.createOpenChannelListQuery({\n          customTypes: [OpenChannelCustomType.COMMUNITY],\n        });\n      }}\n    />\n  );\n};\n\nexport default OpenChannelListCommunityScreen;\n","import React, { useCallback } from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport type { OpenChannel } from '@sendbird/chat/openChannel';\nimport { createOpenChannelListFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\nimport { createOpenChannelListModule } from '@sendbird/uikit-react-native';\nimport {\n  Avatar,\n  Box,\n  Image,\n  PressBox,\n  Text,\n  useHeaderStyle,\n  useUIKitTheme,\n} from '@sendbird/uikit-react-native-foundation';\nimport type { SendbirdOpenChannel } from '@sendbird/uikit-utils';\n\nimport { useAppNavigation } from '../../../../hooks/useAppNavigation';\nimport { Routes } from '../../../../libs/navigation';\nimport { OpenChannelCustomType, parseStreamData } from '../../../../libs/openChannel';\n\nconst BasicOpenChannelListModule = createOpenChannelListModule();\nconst OpenChannelListFragment = createOpenChannelListFragment({\n  Header: () => {\n    const { HeaderComponent } = useHeaderStyle();\n    return <HeaderComponent title={'Live streams'} />;\n  },\n  List: (props) => {\n    const { colors } = useUIKitTheme();\n    return (\n      <Box flex={1}>\n        <Text body2 color={colors.onBackground02} style={{ paddingHorizontal: 16, paddingTop: 16, paddingBottom: 4 }}>\n          {'Preset channels developed by UIKit'}\n        </Text>\n        <BasicOpenChannelListModule.List {...props} />\n      </Box>\n    );\n  },\n});\nconst OpenChannelListLiveStreamsScreen = () => {\n  const { navigation } = useAppNavigation<Routes.OpenChannelListLiveStreams>();\n  const { sdk } = useSendbirdChat();\n\n  const navigateToCreateOpenChannel = () => {\n    // Navigating to open channel create\n    // navigation.navigate(Routes.OpenChannelCreate)\n  };\n\n  const navigateToOpenChannel = (channel: SendbirdOpenChannel) => {\n    // Navigating to open channel\n    navigation.navigate(Routes.OpenChannelLiveStream, { channelUrl: channel.url });\n  };\n\n  return (\n    <OpenChannelListFragment\n      onPressCreateChannel={navigateToCreateOpenChannel}\n      onPressChannel={navigateToOpenChannel}\n      queryCreator={() => {\n        return sdk.openChannel.createOpenChannelListQuery({\n          customTypes: [OpenChannelCustomType.LIVE],\n        });\n      }}\n      renderOpenChannelPreview={useCallback(\n        (props: { channel: OpenChannel }) => (\n          <PressBox onPress={() => navigateToOpenChannel(props.channel)}>\n            <LiveStreamPreview {...props} />\n          </PressBox>\n        ),\n        [],\n      )}\n      flatListProps={{ bounces: false, onRefresh: undefined }}\n    />\n  );\n};\n\nconst LiveStreamPreview = ({ channel }: { channel: SendbirdOpenChannel }) => {\n  const streamData = parseStreamData(channel.data);\n  const { colors, palette } = useUIKitTheme();\n\n  if (!streamData) return null;\n\n  return (\n    <Box flexDirection={'row'} paddingVertical={12} paddingHorizontal={16}>\n      <Box width={120} height={72} backgroundColor={colors.onBackground04}>\n        <Image resizeMode={'cover'} source={{ uri: streamData.live_channel_url }} style={StyleSheet.absoluteFill} />\n        <Box\n          backgroundColor={colors.error}\n          width={10}\n          height={10}\n          borderRadius={5}\n          style={{ position: 'absolute', left: 4, bottom: 4 }}\n        />\n        <Text caption1 color={palette.onBackgroundDark01} style={{ position: 'absolute', left: 18, bottom: 1 }}>\n          {channel.participantCount}\n        </Text>\n      </Box>\n      <Box marginLeft={16} flexShrink={1}>\n        <Box flexDirection={'row'} marginBottom={6}>\n          <Avatar uri={streamData.thumbnail_url} size={22} containerStyle={{ marginRight: 8 }} />\n          <Text subtitle1 color={colors.onBackground01} numberOfLines={1} style={{ flexShrink: 1 }}>\n            {streamData.name}\n          </Text>\n        </Box>\n        <Text body3 color={colors.onBackground02} style={{ marginBottom: 4 }}>\n          {streamData.creator_info.name}\n        </Text>\n        <Box flexDirection={'row'} justifyContent={'flex-start'}>\n          {streamData.tags.slice(0, 2).map((tag) => {\n            return (\n              <Box\n                backgroundColor={colors.onBackground04}\n                key={tag}\n                paddingHorizontal={8}\n                paddingVertical={4}\n                borderRadius={60}\n                marginRight={4}\n              >\n                <Text caption1 color={colors.onBackground02}>\n                  {tag}\n                </Text>\n              </Box>\n            );\n          })}\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default OpenChannelListLiveStreamsScreen;\n","import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport React from 'react';\n\nimport { Icon, useUIKitTheme } from '@sendbird/uikit-react-native-foundation';\n\nimport { useAppNavigation } from '../../../../hooks/useAppNavigation';\nimport { Routes } from '../../../../libs/navigation';\nimport SettingsScreen from '../../SettingsScreen';\nimport OpenChannelListCommunityScreen from './OpenChannelListCommunityScreen';\nimport OpenChannelListLiveStreamsScreen from './OpenChannelListLiveStreamsScreen';\n\nconst Tab = createBottomTabNavigator();\n\nconst OpenChannelTabs = () => {\n  const { params } = useAppNavigation<Routes.OpenChannelTabs>();\n\n  const { colors, typography } = useUIKitTheme();\n\n  return (\n    <Tab.Navigator\n      initialRouteName={Routes.OpenChannelListLiveStreams}\n      screenOptions={{\n        lazy: false,\n        headerShown: false,\n        tabBarActiveTintColor: colors.primary,\n        tabBarLabelStyle: typography.caption2,\n      }}\n    >\n      <Tab.Screen\n        name={Routes.OpenChannelListLiveStreams}\n        component={OpenChannelListLiveStreamsScreen}\n        initialParams={params}\n        options={{\n          tabBarLabel: 'Live streams',\n          tabBarIcon: ({ color }) => <Icon icon={'streaming'} color={color} />,\n        }}\n      />\n      <Tab.Screen\n        name={Routes.OpenChannelListCommunity}\n        component={OpenChannelListCommunityScreen}\n        initialParams={params}\n        options={{\n          tabBarLabel: 'Community',\n          tabBarIcon: ({ color }) => <Icon icon={'channels'} color={color} />,\n        }}\n      />\n      <Tab.Screen\n        name={Routes.Settings}\n        component={SettingsScreen}\n        options={{\n          tabBarLabel: 'My settings',\n          tabBarIcon: ({ color }) => <Icon icon={'settings-filled'} color={color} />,\n        }}\n      />\n    </Tab.Navigator>\n  );\n};\n\nexport default OpenChannelTabs;\n","import React from 'react';\n\nimport { useOpenChannel } from '@sendbird/uikit-chat-hooks';\nimport { createOpenChannelFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport { Routes } from '../../../libs/navigation';\nimport { OpenChannelCustomType } from '../../../libs/openChannel';\n\nconst OpenChannelFragment = createOpenChannelFragment();\n\nconst OpenChannelScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.OpenChannel>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useOpenChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <OpenChannelFragment\n      channel={channel}\n      onPressMediaMessage={(fileMessage, deleteMessage) => {\n        // Navigate to media viewer\n        navigation.navigate(Routes.FileViewer, {\n          serializedFileMessage: fileMessage.serialize(),\n          deleteMessage,\n        });\n      }}\n      onChannelDeleted={() => {\n        // Should leave channel, navigate to channel list\n        if (channel.customType.includes(OpenChannelCustomType.LIVE)) {\n          navigation.navigate(Routes.OpenChannelListLiveStreams);\n        } else if (channel.customType.includes(OpenChannelCustomType.COMMUNITY)) {\n          navigation.navigate(Routes.OpenChannelListCommunity);\n        } else {\n          navigation.navigate(Routes.OpenChannelTabs);\n        }\n      }}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n      onPressHeaderRightWithSettings={() => {\n        // Navigate to open channel settings\n        navigation.push(Routes.OpenChannelSettings, params);\n      }}\n      onPressHeaderRightWithParticipants={() => {\n        // Navigate to open channel participants\n        navigation.push(Routes.OpenChannelParticipants, params);\n      }}\n    />\n  );\n};\n\nexport default OpenChannelScreen;\n","import React, { useContext } from 'react';\nimport { StyleSheet, useWindowDimensions } from 'react-native';\n\nimport { useChannelHandler, useOpenChannel } from '@sendbird/uikit-chat-hooks';\nimport { OpenChannelContexts, createOpenChannelFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\nimport {\n  Avatar,\n  Box,\n  Header,\n  Icon,\n  Image,\n  PressBox,\n  Text,\n  createStyleSheet,\n  useHeaderStyle,\n  useUIKitTheme,\n} from '@sendbird/uikit-react-native-foundation';\nimport type { SendbirdOpenChannel } from '@sendbird/uikit-utils';\nimport { useForceUpdate } from '@sendbird/uikit-utils';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport { Routes } from '../../../libs/navigation';\nimport { OpenChannelCustomType, parseStreamData } from '../../../libs/openChannel';\n\nconst useIsLandscape = () => {\n  const { width, height } = useWindowDimensions();\n  return width > height;\n};\n\nconst StreamView = (props: { channel: SendbirdOpenChannel; height: number | string }) => {\n  const { navigation } = useAppNavigation<Routes.OpenChannelLiveStream>();\n  const { topInset } = useHeaderStyle();\n  const { colors, palette } = useUIKitTheme();\n  const isLandscape = useIsLandscape();\n  const { sdk } = useSendbirdChat();\n  const forceUpdate = useForceUpdate();\n\n  useChannelHandler(\n    sdk,\n    'UIKitSample_StreamView',\n    {\n      onChannelParticipantCountChanged() {\n        forceUpdate();\n      },\n    },\n    'open',\n  );\n\n  const streamData = parseStreamData(props.channel.data);\n  const streamInfoPosition = isLandscape ? 20 : 12;\n  if (!streamData) return null;\n\n  return (\n    <Box style={{ height: props.height, width: '100%' }} flex={isLandscape ? 1.2 : 0}>\n      <Image style={StyleSheet.absoluteFill} resizeMode={'cover'} source={{ uri: streamData.live_channel_url }} />\n      <Box style={StyleSheet.absoluteFill} backgroundColor={palette.overlay02} />\n      <PressBox activeOpacity={0.8} onPress={() => navigation.goBack()}>\n        <Icon\n          size={24}\n          icon={'close'}\n          color={'white'}\n          containerStyle={{ position: 'absolute', left: streamInfoPosition, top: streamInfoPosition + topInset }}\n        />\n      </PressBox>\n      <Box\n        flexDirection={'row'}\n        alignItems={'center'}\n        style={{ position: 'absolute', left: streamInfoPosition, bottom: streamInfoPosition }}\n      >\n        <Box backgroundColor={colors.error} width={10} height={10} borderRadius={5} marginRight={4} />\n        <Text button color={palette.onBackgroundDark01} style={{ marginRight: 16 }}>\n          {'Live'}\n        </Text>\n        <Text body3 color={palette.onBackgroundDark01}>\n          {`${props.channel.participantCount} participants`}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nconst OpenChannelFragment = createOpenChannelFragment({\n  Header: ({ onPressHeaderRight, rightIconName }) => {\n    const { channel } = useContext(OpenChannelContexts.Fragment);\n    const { HeaderComponent } = useHeaderStyle();\n    const isLandscape = useIsLandscape();\n    const streamData = parseStreamData(channel.data);\n    if (!streamData) return null;\n\n    return (\n      <HeaderComponent\n        clearTitleMargin\n        clearStatusBarTopInset={!isLandscape}\n        title={\n          <Box flexDirection={'row'} alignItems={'center'} style={styles.titleContainer}>\n            <Avatar uri={streamData.thumbnail_url} size={34} containerStyle={styles.avatarGroup} />\n            <Box flexShrink={1}>\n              <Header.Title h2>{streamData.name}</Header.Title>\n              <Header.Subtitle style={styles.subtitle}>{streamData.creator_info.name}</Header.Subtitle>\n            </Box>\n          </Box>\n        }\n        right={<Icon icon={rightIconName} />}\n        onPressRight={onPressHeaderRight}\n      />\n    );\n  },\n});\n\nconst OpenChannelLiveStreamScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.OpenChannelLiveStream>();\n  const isLandscape = useIsLandscape();\n  const { topInset } = useHeaderStyle();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useOpenChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  const streamViewHeight = isLandscape ? '100%' : 200 + topInset;\n  const keyboardAvoidOffset = isLandscape ? 0 : (streamViewHeight as number);\n\n  return (\n    <Box flex={1} flexDirection={isLandscape ? 'row' : 'column'}>\n      {/*<StatusBar hidden animated />*/}\n      <StreamView height={streamViewHeight} channel={channel} />\n      <OpenChannelFragment\n        keyboardAvoidOffset={keyboardAvoidOffset}\n        channel={channel}\n        onPressMediaMessage={(fileMessage, deleteMessage) => {\n          // Navigate to media viewer\n          navigation.navigate(Routes.FileViewer, {\n            serializedFileMessage: fileMessage.serialize(),\n            deleteMessage,\n          });\n        }}\n        onChannelDeleted={() => {\n          // Should leave channel, navigate to channel list\n          if (channel.customType.includes(OpenChannelCustomType.LIVE)) {\n            navigation.navigate(Routes.OpenChannelListLiveStreams);\n          } else if (channel.customType.includes(OpenChannelCustomType.COMMUNITY)) {\n            navigation.navigate(Routes.OpenChannelListCommunity);\n          } else {\n            navigation.navigate(Routes.OpenChannelTabs);\n          }\n        }}\n        onPressHeaderLeft={() => {\n          // Navigate back\n          navigation.goBack();\n        }}\n        onPressHeaderRightWithSettings={() => {\n          // Navigate to open channel settings\n          navigation.push(Routes.OpenChannelSettings, params);\n        }}\n        onPressHeaderRightWithParticipants={() => {\n          // Navigate to open channel participants\n          navigation.push(Routes.OpenChannelParticipants, params);\n        }}\n      />\n    </Box>\n  );\n};\n\nconst styles = createStyleSheet({\n  titleContainer: {\n    maxWidth: '100%',\n  },\n  avatarGroup: {\n    marginRight: 8,\n  },\n  subtitle: {\n    marginTop: 2,\n  },\n});\n\nexport default OpenChannelLiveStreamScreen;\n","import React from 'react';\n\nimport { useOpenChannel } from '@sendbird/uikit-chat-hooks';\nimport { createOpenChannelParticipantsFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport type { Routes } from '../../../libs/navigation';\n\nconst OpenChannelParticipantsFragment = createOpenChannelParticipantsFragment();\n\nconst OpenChannelParticipantsScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.OpenChannelParticipants>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useOpenChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <OpenChannelParticipantsFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        navigation.goBack();\n      }}\n    />\n  );\n};\n\nexport default OpenChannelParticipantsScreen;\n","import React from 'react';\n\nimport { useOpenChannel } from '@sendbird/uikit-chat-hooks';\nimport { createOpenChannelSettingsFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport { Routes } from '../../../libs/navigation';\nimport { OpenChannelCustomType } from '../../../libs/openChannel';\n\nconst OpenChannelSettingsFragment = createOpenChannelSettingsFragment();\nconst OpenChannelSettingsScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.OpenChannelSettings>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useOpenChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <OpenChannelSettingsFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n      onPressMenuModeration={() => {\n        // Navigate to open channel moderation\n        navigation.push(Routes.OpenChannelModeration, params);\n      }}\n      onPressMenuParticipants={() => {\n        // Navigate to open channel participants\n        navigation.push(Routes.OpenChannelParticipants, params);\n      }}\n      onPressMenuDeleteChannel={() => {\n        // Navigate to open channel list\n        if (channel.customType.includes(OpenChannelCustomType.LIVE)) {\n          navigation.navigate(Routes.OpenChannelListLiveStreams);\n        } else if (channel.customType.includes(OpenChannelCustomType.COMMUNITY)) {\n          navigation.navigate(Routes.OpenChannelListCommunity);\n        } else {\n          navigation.navigate(Routes.OpenChannelTabs);\n        }\n      }}\n      onNavigateToOpenChannel={() => {\n        // Navigate to open channel. This function is called when current user is unregistered from the operator.\n        navigation.navigate(Routes.OpenChannel, params);\n      }}\n    />\n  );\n};\n\nexport default OpenChannelSettingsScreen;\n","import React from 'react';\n\nimport { createOpenChannelCreateFragment } from '@sendbird/uikit-react-native';\nimport type { SendbirdOpenChannel } from '@sendbird/uikit-utils';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport { Routes } from '../../../libs/navigation';\nimport { OpenChannelCustomType } from '../../../libs/openChannel';\n\nconst OpenChannelCreateFragment = createOpenChannelCreateFragment();\nconst OpenChannelCreateScreen = () => {\n  const { navigation } = useAppNavigation<Routes.OpenChannelCreate>();\n\n  const navigateToOpenChannel = (channel: SendbirdOpenChannel) => {\n    navigation.replace(Routes.OpenChannel, { channelUrl: channel.url });\n  };\n  const navigateBack = () => {\n    navigation.goBack();\n  };\n\n  return (\n    <OpenChannelCreateFragment\n      onCreateChannel={navigateToOpenChannel}\n      onPressHeaderLeft={navigateBack}\n      onBeforeCreateChannel={(params) => {\n        params.customType = OpenChannelCustomType.COMMUNITY;\n        return params;\n      }}\n    />\n  );\n};\n\nexport default OpenChannelCreateScreen;\n","import React from 'react';\n\nimport { useOpenChannel } from '@sendbird/uikit-chat-hooks';\nimport { createOpenChannelModerationFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport { Routes } from '../../../libs/navigation';\n\nconst OpenChannelModerationFragment = createOpenChannelModerationFragment();\nconst OpenChannelModerationScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.OpenChannelModeration>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useOpenChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <OpenChannelModerationFragment\n      channel={channel}\n      onPressMenuOperators={() => {\n        // Navigate to open channel operators\n        navigation.push(Routes.OpenChannelOperators, params);\n      }}\n      onPressMenuMutedParticipants={() => {\n        // Navigate to open channel muted participants\n        navigation.push(Routes.OpenChannelMutedParticipants, params);\n      }}\n      onPressMenuBannedUsers={() => {\n        // Navigate to open channel banned users\n        navigation.push(Routes.OpenChannelBannedUsers, params);\n      }}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n    />\n  );\n};\n\nexport default OpenChannelModerationScreen;\n","import React from 'react';\n\nimport { useOpenChannel } from '@sendbird/uikit-chat-hooks';\nimport { createOpenChannelBannedUsersFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport type { Routes } from '../../../libs/navigation';\n\nconst OpenChannelBannedUsersFragment = createOpenChannelBannedUsersFragment();\nconst OpenChannelBannedUsersScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.OpenChannelBannedUsers>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useOpenChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <OpenChannelBannedUsersFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n    />\n  );\n};\n\nexport default OpenChannelBannedUsersScreen;\n","import React from 'react';\n\nimport { useOpenChannel } from '@sendbird/uikit-chat-hooks';\nimport { createOpenChannelMutedParticipantsFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport type { Routes } from '../../../libs/navigation';\n\nconst OpenChannelMutedMembersFragment = createOpenChannelMutedParticipantsFragment();\nconst OpenChannelMutedParticipantsScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.OpenChannelMutedParticipants>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useOpenChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <OpenChannelMutedMembersFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n    />\n  );\n};\n\nexport default OpenChannelMutedParticipantsScreen;\n","import React from 'react';\n\nimport { useOpenChannel } from '@sendbird/uikit-chat-hooks';\nimport { useSendbirdChat } from '@sendbird/uikit-react-native';\nimport { createOpenChannelOperatorsFragment } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport { Routes } from '../../../libs/navigation';\n\nconst OpenChannelOperatorsFragment = createOpenChannelOperatorsFragment();\nconst OpenChannelOperatorsScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.OpenChannelOperators>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useOpenChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <OpenChannelOperatorsFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n      onPressHeaderRight={() => {\n        // Navigate to open channel set as operators\n        navigation.navigate(Routes.OpenChannelRegisterOperator, params);\n      }}\n    />\n  );\n};\n\nexport default OpenChannelOperatorsScreen;\n","import React from 'react';\n\nimport { useOpenChannel } from '@sendbird/uikit-chat-hooks';\nimport { createOpenChannelRegisterOperatorFragment, useSendbirdChat } from '@sendbird/uikit-react-native';\n\nimport { useAppNavigation } from '../../../hooks/useAppNavigation';\nimport { Routes } from '../../../libs/navigation';\n\nconst OpenChannelRegisterOperatorFragment = createOpenChannelRegisterOperatorFragment();\nconst OpenChannelRegisterOperatorScreen = () => {\n  const { navigation, params } = useAppNavigation<Routes.OpenChannelRegisterOperator>();\n\n  const { sdk } = useSendbirdChat();\n  const { channel } = useOpenChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <OpenChannelRegisterOperatorFragment\n      channel={channel}\n      onPressHeaderLeft={() => {\n        // Navigate back\n        navigation.goBack();\n      }}\n      onPressHeaderRight={() => {\n        // Navigate to open channel operators\n        navigation.navigate(Routes.OpenChannelOperators, params);\n      }}\n    />\n  );\n};\n\nexport default OpenChannelRegisterOperatorScreen;\n","import React, { useState } from 'react';\n\nimport { FileViewer, useSendbirdChat } from '@sendbird/uikit-react-native';\nimport type { SendbirdFileMessage } from '@sendbird/uikit-utils';\n\nimport { useAppNavigation } from '../../hooks/useAppNavigation';\nimport type { Routes } from '../../libs/navigation';\n\nconst FileViewerScreen = () => {\n  const { sdk } = useSendbirdChat();\n  const { navigation, params } = useAppNavigation<Routes.FileViewer>();\n  const [fileMessage] = useState(\n    () => sdk.message.buildMessageFromSerializedData(params.serializedFileMessage) as SendbirdFileMessage,\n  );\n  return (\n    <FileViewer fileMessage={fileMessage} onClose={() => navigation.goBack()} deleteMessage={params.deleteMessage} />\n  );\n};\n\nexport default FileViewerScreen;\n","import React from \"react\";\n\nimport { useGroupChannel } from \"@sendbird/uikit-chat-hooks\";\nimport {\n  createMessageSearchFragment,\n  useSendbirdChat,\n} from \"@sendbird/uikit-react-native\";\n\nimport { useAppNavigation } from \"../../hooks/useAppNavigation\";\nimport { Routes } from \"../../libs/navigation\";\n\nconst MessageSearchFragment = createMessageSearchFragment();\nconst MessageSearchScreen = () => {\n  const { sdk } = useSendbirdChat();\n  const { navigation, params } = useAppNavigation<Routes.MessageSearch>();\n\n  const { channel } = useGroupChannel(sdk, params.channelUrl);\n  if (!channel) return null;\n\n  return (\n    <MessageSearchFragment\n      channel={channel}\n      onPressHeaderLeft={() => navigation.goBack()}\n      onPressSearchResultItem={({ message, channel }) => {\n        navigation.push(Routes.GroupChannel, {\n          channelUrl: channel.url,\n          searchItem: { startingPoint: message.createdAt },\n        });\n      }}\n    />\n  );\n};\n\nexport default MessageSearchScreen;\n","import SendbirdChat from '@sendbird/chat';\nimport { SendbirdUIKit } from '@sendbird/uikit-react-native';\n\nconst useVersions = () => {\n  return {\n    chat: SendbirdChat.version,\n    uikit: SendbirdUIKit.VERSION,\n  };\n};\n\nexport default useVersions;\n","import React from 'react';\nimport { StyleProp, StyleSheet, View, ViewStyle } from 'react-native';\n\nimport { Text } from '@sendbird/uikit-react-native-foundation';\n\nimport useVersions from '../hooks/useVersions';\n\nconst Versions = ({ style }: { style?: StyleProp<ViewStyle> }) => {\n  const versions = useVersions();\n  return (\n    <View style={[styles.container, style]}>\n      <Text style={styles.version}>{`UIKit v${versions.uikit}`}</Text>\n      <View style={{ width: 24 }} />\n      <Text style={styles.version}>{`Chat v${versions.chat}`}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  version: {\n    fontSize: 12,\n    color: '#777',\n  },\n});\n\nexport default Versions;\n","import React, { useState } from \"react\";\nimport { Image, Platform, StyleSheet, View } from \"react-native\";\n\nimport { SessionHandler } from \"@sendbird/chat\";\nimport { useConnection, useSendbirdChat } from \"@sendbird/uikit-react-native\";\nimport {\n  Button,\n  Text,\n  TextInput,\n  useUIKitTheme,\n} from \"@sendbird/uikit-react-native-foundation\";\n\nimport Versions from \"../components/Versions\";\nimport { SendbirdAPI } from \"../factory\";\nimport { useAppAuth } from \"../libs/authentication\";\n\nconst SignInScreen = () => {\n  const [userId, setUserId] = useState(\"\");\n  const [nickname, setNickname] = useState(\"\");\n\n  const { sdk } = useSendbirdChat();\n  const { connect } = useConnection();\n\n  const connectWith = async (\n    userId: string,\n    nickname?: string,\n    useSessionToken = false\n  ) => {\n    if (useSessionToken) {\n      const sessionHandler = new SessionHandler();\n      sessionHandler.onSessionTokenRequired = (onSuccess, onFail) => {\n        SendbirdAPI.getSessionToken(userId)\n          .then(({ token }) => onSuccess(token))\n          .catch(onFail);\n      };\n      sdk.setSessionHandler(sessionHandler);\n\n      const data = await SendbirdAPI.getSessionToken(userId);\n      await connect(userId, { nickname, accessToken: data.token });\n    } else {\n      await connect(userId, { nickname });\n    }\n  };\n\n  const { loading, signIn } = useAppAuth((user) => {\n    if (Platform.OS === \"web\") throw new Error(\"Not supported on web\");\n    return connectWith(user.userId, user.nickname);\n  });\n  const { colors } = useUIKitTheme();\n\n  if (loading) return null;\n\n  return (\n    <View style={[styles.container, { backgroundColor: colors.background }]}>\n      <Image\n        style={styles.logo}\n        source={require(\"../assets/logoSendbird.png\")}\n      />\n      <Text style={styles.title}>{\"Sendbird RN-UIKit sample\"}</Text>\n      <TextInput\n        placeholder={\"User ID\"}\n        value={userId}\n        onChangeText={setUserId}\n        style={[\n          styles.input,\n          { backgroundColor: colors.onBackground04, marginBottom: 12 },\n        ]}\n      />\n      <TextInput\n        placeholder={\"Nickname\"}\n        value={nickname}\n        onChangeText={setNickname}\n        style={[styles.input, { backgroundColor: colors.onBackground04 }]}\n      />\n      <Button\n        style={styles.btn}\n        variant={\"contained\"}\n        onPress={async () => {\n          if (userId) {\n            await signIn({ userId, nickname });\n            await connectWith(userId, nickname);\n          }\n        }}\n      >\n        {\"Sign in\"}\n      </Button>\n\n      <Versions style={{ marginTop: 12 }} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingTop: 80,\n    alignItems: \"center\",\n    paddingHorizontal: 24,\n  },\n  logo: {\n    width: 48,\n    height: 48,\n    marginBottom: 24,\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: \"700\",\n    marginBottom: 34,\n  },\n  btn: {\n    width: \"100%\",\n    paddingVertical: 16,\n  },\n  input: {\n    width: \"100%\",\n    borderRadius: 4,\n    marginBottom: 32,\n    paddingHorizontal: 16,\n    paddingVertical: 16,\n  },\n});\n\nexport default SignInScreen;\n","import React from 'react';\nimport { Image, Pressable, StyleSheet, View } from 'react-native';\n\nimport { Text, useUIKitTheme } from '@sendbird/uikit-react-native-foundation';\n\ntype Props = React.PropsWithChildren<{\n  onPress: () => void;\n  title: string;\n  desc: string;\n  image: any;\n}>;\nconst HomeListItem = ({ title, desc, image, onPress }: Props) => {\n  const { select, colors } = useUIKitTheme();\n  return (\n    <Pressable\n      onPress={onPress}\n      style={[styles.container, { backgroundColor: select({ light: colors.background, dark: colors.onBackground04 }) }]}\n    >\n      <View style={styles.infoContainer}>\n        <View style={styles.infoText}>\n          <Text h2 color={colors.onBackground01} style={{ marginBottom: 8 }}>\n            {title}\n          </Text>\n          <Text body3 color={colors.onBackground02}>\n            {desc}\n          </Text>\n        </View>\n        <Image resizeMode={'contain'} source={image} style={styles.infoImage} />\n      </View>\n    </Pressable>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 8,\n    width: '100%',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.15,\n    shadowOffset: { width: 0, height: 8 },\n    shadowRadius: 4,\n  },\n  infoContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 24,\n  },\n  infoText: {\n    flex: 1,\n    marginRight: 16,\n  },\n  infoImage: {\n    width: 78,\n    height: 64,\n  },\n  button: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingVertical: 20,\n    borderBottomLeftRadius: 8,\n    borderBottomRightRadius: 8,\n  },\n});\n\nexport default HomeListItem;\n","import React from \"react\";\nimport { Alert, FlatList, Pressable, StyleSheet, View } from \"react-native\";\nimport { useSafeAreaInsets } from \"react-native-safe-area-context\";\n\nimport { useConnection } from \"@sendbird/uikit-react-native\";\nimport {\n  Button,\n  Text,\n  useUIKitTheme,\n} from \"@sendbird/uikit-react-native-foundation\";\n\nimport HomeListItem from \"../components/HomeListItem\";\nimport Versions from \"../components/Versions\";\nimport { useAppNavigation } from \"../hooks/useAppNavigation\";\nimport { useAppAuth } from \"../libs/authentication\";\nimport { Routes } from \"../libs/navigation\";\n\nconst HomeItems: {\n  title: string;\n  desc?: string;\n  image?: any;\n  route?: Routes;\n}[] = [\n  {\n    image: require(\"../assets/imgGroupchannel.png\"),\n    title: \"Group channel\",\n    desc: \"1 on 1, Group chat with members\",\n    route: Routes.GroupChannelTabs,\n  },\n  {\n    image: require(\"../assets/imgOpenchannel.png\"),\n    title: \"Open channel\",\n    desc: \"Live streams, Open community chat\",\n    route: Routes.OpenChannelTabs,\n  },\n  {\n    title: \"Palette\",\n    route: Routes.Palette,\n  },\n  {\n    title: \"Themed colors\",\n    route: Routes.ThemeColors,\n  },\n];\n\nconst HomeScreen = () => {\n  const { top, bottom, left, right } = useSafeAreaInsets();\n  const { navigation } = useAppNavigation();\n  const { signOut } = useAppAuth();\n  const { disconnect } = useConnection();\n  const { select, colors } = useUIKitTheme();\n\n  return (\n    <FlatList\n      style={{\n        backgroundColor: select({ light: \"#F0F0F0\", dark: \"#0F0F0F\" }),\n        marginTop: top,\n      }}\n      contentContainerStyle={{\n        paddingTop: 32,\n        paddingBottom: 32 + bottom,\n        paddingLeft: 24 + left,\n        paddingRight: 24 + right,\n      }}\n      data={HomeItems}\n      keyExtractor={(k) => k.title}\n      ItemSeparatorComponent={() => <View style={styles.separator} />}\n      renderItem={({ item }) => {\n        if (item.image) {\n          return (\n            <HomeListItem\n              image={item.image}\n              title={item.title}\n              desc={item.desc || \"\"}\n              onPress={() => {\n                if (!item.route)\n                  return Alert.alert(\"Sorry\", \"Not implemented yet\");\n                navigation.navigate(item.route);\n              }}\n            />\n          );\n        }\n\n        return (\n          <Pressable\n            onPress={() => {\n              if (!item.route)\n                return Alert.alert(\"Sorry\", \"Not implemented yet\");\n              navigation.navigate(item.route);\n            }}\n            style={[\n              styles.customSampleButton,\n              {\n                backgroundColor: select({\n                  light: colors.background,\n                  dark: colors.onBackground04,\n                }),\n              },\n            ]}\n          >\n            <Text h2>{item.title}</Text>\n          </Pressable>\n        );\n      }}\n      ListHeaderComponent={<Text style={styles.screenTitle}>{\"Home\"}</Text>}\n      ListFooterComponent={\n        <View style={styles.footer}>\n          <View style={styles.divider} />\n          <Button\n            variant={\"contained\"}\n            style={styles.btn}\n            onPress={async () => {\n              await signOut();\n              await disconnect();\n            }}\n          >\n            {\"Sign out\"}\n          </Button>\n          <Versions style={{ marginTop: 12 }} />\n        </View>\n      }\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  list: {\n    backgroundColor: \"red\",\n  },\n  screenTitle: {\n    fontSize: 24,\n    fontWeight: \"bold\",\n    marginBottom: 16,\n  },\n  separator: {\n    height: 16,\n  },\n  divider: {\n    marginVertical: 32,\n    height: 1,\n    backgroundColor: \"rgba(122,122,122,0.2)\",\n  },\n  customSampleButton: {\n    paddingHorizontal: 24,\n    paddingVertical: 22,\n    elevation: 4,\n    shadowColor: \"black\",\n    shadowOpacity: 0.15,\n    shadowOffset: { width: 0, height: 8 },\n    shadowRadius: 4,\n    borderRadius: 8,\n  },\n  footer: {\n    marginTop: 16,\n  },\n  btn: {\n    width: \"100%\",\n    paddingVertical: 16,\n  },\n});\n\nexport default HomeScreen;\n","import React from 'react';\nimport { SectionList, View } from 'react-native';\n\nimport type { ErrorBoundaryProps } from '@sendbird/uikit-react-native';\nimport { Button, Palette, Text } from '@sendbird/uikit-react-native-foundation';\n\nconst ErrorInfoScreen = (props: ErrorBoundaryProps) => {\n  const renderHeader = (props: { section: { title: string } }) => (\n    <Text\n      body2\n      color={Palette.onBackgroundLight01}\n      style={{ backgroundColor: Palette.background300, paddingHorizontal: 8, paddingVertical: 4 }}\n    >\n      {props.section.title}\n    </Text>\n  );\n  const renderItem = (props: { item?: string }) => (\n    <Text caption2 color={Palette.onBackgroundLight02} style={{ padding: 12 }}>\n      {props.item}\n    </Text>\n  );\n\n  return (\n    <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n      <SectionList\n        bounces={false}\n        style={{ width: '80%', maxHeight: 400, borderRadius: 8, marginBottom: 16 }}\n        contentContainerStyle={{ backgroundColor: Palette.background100 }}\n        stickySectionHeadersEnabled\n        sections={[\n          {\n            title: 'Error name',\n            data: [props.error.name],\n            renderItem,\n          },\n          {\n            title: 'Error message',\n            data: [props.error.message],\n            renderItem,\n          },\n          {\n            title: 'Error stack',\n            data: [props.error.stack],\n            renderItem,\n          },\n          {\n            title: 'Error info',\n            data: [props.errorInfo.componentStack],\n            renderItem,\n          },\n        ]}\n        renderSectionHeader={renderHeader}\n      />\n      <Button onPress={props.reset} style={{ width: '80%' }}>\n        {'Reset'}\n      </Button>\n    </View>\n  );\n};\n\nexport default ErrorInfoScreen;\n","import * as Notifications from \"expo-notifications\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport {\n  DarkTheme,\n  DefaultTheme,\n  NavigationContainer,\n} from \"@react-navigation/native\";\nimport React, { useEffect } from \"react\";\nimport { AppState, Platform } from \"react-native\";\n\nimport {\n  SendbirdUIKitContainer,\n  useSendbirdChat,\n} from \"@sendbird/uikit-react-native\";\nimport {\n  DarkUIKitTheme,\n  LightUIKitTheme,\n} from \"@sendbird/uikit-react-native-foundation\";\n\n// import LogView from './components/LogView';\nimport { APP_ID } from \"./env\";\nimport {\n  ClipboardService,\n  FileService,\n  GetTranslucent,\n  MediaService,\n  NotificationService,\n  RootStack,\n  SetSendbirdSDK,\n} from \"./factory\";\nimport useAppearance from \"./hooks/useAppearance\";\nimport { navigationActions, navigationRef, Routes } from \"./libs/navigation\";\nimport { onForeground } from \"./libs/notification\";\nimport {\n  ErrorInfoScreen,\n  GroupChannelBannedUsersScreen,\n  GroupChannelCreateScreen,\n  GroupChannelInviteScreen,\n  GroupChannelMembersScreen,\n  GroupChannelModerationScreen,\n  GroupChannelMutedMembersScreen,\n  GroupChannelNotificationsScreen,\n  GroupChannelOperatorsScreen,\n  GroupChannelRegisterOperatorScreen,\n  GroupChannelScreen,\n  GroupChannelSettingsScreen,\n  GroupChannelTabs,\n  HomeScreen,\n  MessageSearchScreen,\n  OpenChannelBannedUsersScreen,\n  OpenChannelCreateScreen,\n  OpenChannelLiveStreamScreen,\n  OpenChannelModerationScreen,\n  OpenChannelMutedParticipantsScreen,\n  OpenChannelOperatorsScreen,\n  OpenChannelParticipantsScreen,\n  OpenChannelRegisterOperatorScreen,\n  OpenChannelScreen,\n  OpenChannelSettingsScreen,\n  OpenChannelTabs,\n  PaletteScreen,\n  SignInScreen,\n  ThemeColorsScreen,\n} from \"./screens\";\nimport FileViewerScreen from \"./screens/uikit/FileViewerScreen\";\n\nconst App = () => {\n  const { scheme } = useAppearance();\n  const isLightTheme = scheme === \"light\";\n\n  return (\n    <SendbirdUIKitContainer\n      appId={APP_ID}\n      chatOptions={{\n        localCacheStorage: AsyncStorage,\n        onInitialized: SetSendbirdSDK,\n        enableAutoPushTokenRegistration: true,\n        enableChannelListTypingIndicator: true,\n        enableChannelListMessageReceiptStatus: true,\n        enableUserMention: true,\n        enableMessageSearch: true,\n      }}\n      platformServices={{\n        file: FileService,\n        notification: NotificationService,\n        clipboard: ClipboardService,\n        media: MediaService,\n      }}\n      styles={{\n        defaultHeaderTitleAlign: \"left\", //'center',\n        theme: isLightTheme ? LightUIKitTheme : DarkUIKitTheme,\n        statusBarTranslucent: GetTranslucent(),\n      }}\n      errorBoundary={{ ErrorInfoComponent: ErrorInfoScreen }}\n      userProfile={{\n        onCreateChannel: (channel) => {\n          const params = { channelUrl: channel.url };\n\n          if (channel.isGroupChannel()) {\n            navigationActions.push(Routes.GroupChannel, params);\n          }\n\n          if (channel.isOpenChannel()) {\n            navigationActions.push(Routes.OpenChannel, params);\n          }\n        },\n      }}\n    >\n      <Navigations />\n    </SendbirdUIKitContainer>\n  );\n};\n\nconst Navigations = () => {\n  const { sdk, currentUser } = useSendbirdChat();\n  const { scheme } = useAppearance();\n  const isLightTheme = scheme === \"light\";\n\n  useEffect(() => {\n    const unsubscribe = onForeground();\n    return () => unsubscribe();\n  }, []);\n\n  useEffect(() => {\n    const { remove } = AppState.addEventListener(\"change\", async () => {\n      const count = await sdk.groupChannel.getTotalUnreadMessageCount();\n      Notifications.setBadgeCountAsync(count);\n    });\n    return () => remove();\n  }, []);\n\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      theme={isLightTheme ? DefaultTheme : DarkTheme}\n    >\n      {/*<LogView />*/}\n      <RootStack.Navigator screenOptions={{ headerShown: false }}>\n        {!currentUser ? (\n          <RootStack.Screen name={Routes.SignIn} component={SignInScreen} />\n        ) : (\n          <>\n            <RootStack.Screen name={Routes.Home} component={HomeScreen} />\n\n            {/** Group channels **/}\n            <RootStack.Group>\n              <RootStack.Screen\n                name={Routes.GroupChannelTabs}\n                component={GroupChannelTabs}\n              />\n              <RootStack.Screen\n                name={Routes.GroupChannel}\n                component={GroupChannelScreen}\n              />\n              <RootStack.Group>\n                <RootStack.Screen\n                  name={Routes.GroupChannelSettings}\n                  component={GroupChannelSettingsScreen}\n                />\n                <RootStack.Screen\n                  name={Routes.GroupChannelNotifications}\n                  component={GroupChannelNotificationsScreen}\n                />\n                <RootStack.Screen\n                  name={Routes.GroupChannelMembers}\n                  component={GroupChannelMembersScreen}\n                />\n                <RootStack.Screen\n                  name={Routes.GroupChannelModeration}\n                  component={GroupChannelModerationScreen}\n                />\n                <RootStack.Screen\n                  name={Routes.GroupChannelMutedMembers}\n                  component={GroupChannelMutedMembersScreen}\n                />\n                <RootStack.Screen\n                  name={Routes.GroupChannelBannedUsers}\n                  component={GroupChannelBannedUsersScreen}\n                />\n                <RootStack.Screen\n                  name={Routes.GroupChannelOperators}\n                  component={GroupChannelOperatorsScreen}\n                />\n                <RootStack.Screen\n                  name={Routes.GroupChannelRegisterOperator}\n                  component={GroupChannelRegisterOperatorScreen}\n                />\n              </RootStack.Group>\n              <RootStack.Screen\n                name={Routes.GroupChannelCreate}\n                component={GroupChannelCreateScreen}\n              />\n              <RootStack.Screen\n                name={Routes.GroupChannelInvite}\n                component={GroupChannelInviteScreen}\n              />\n              <RootStack.Screen\n                name={Routes.MessageSearch}\n                component={MessageSearchScreen}\n              />\n            </RootStack.Group>\n\n            {/** Open channels **/}\n            <RootStack.Group>\n              <RootStack.Screen\n                name={Routes.OpenChannelTabs}\n                component={OpenChannelTabs}\n              />\n              <RootStack.Screen\n                name={Routes.OpenChannel}\n                component={OpenChannelScreen}\n              />\n              <RootStack.Screen\n                name={Routes.OpenChannelLiveStream}\n                component={OpenChannelLiveStreamScreen}\n              />\n              <RootStack.Group>\n                <RootStack.Screen\n                  name={Routes.OpenChannelSettings}\n                  component={OpenChannelSettingsScreen}\n                />\n                <RootStack.Screen\n                  name={Routes.OpenChannelParticipants}\n                  component={OpenChannelParticipantsScreen}\n                />\n                <RootStack.Screen\n                  name={Routes.OpenChannelModeration}\n                  component={OpenChannelModerationScreen}\n                />\n                <RootStack.Screen\n                  name={Routes.OpenChannelMutedParticipants}\n                  component={OpenChannelMutedParticipantsScreen}\n                />\n                <RootStack.Screen\n                  name={Routes.OpenChannelBannedUsers}\n                  component={OpenChannelBannedUsersScreen}\n                />\n                <RootStack.Screen\n                  name={Routes.OpenChannelOperators}\n                  component={OpenChannelOperatorsScreen}\n                />\n                <RootStack.Screen\n                  name={Routes.OpenChannelRegisterOperator}\n                  component={OpenChannelRegisterOperatorScreen}\n                />\n              </RootStack.Group>\n              <RootStack.Screen\n                name={Routes.OpenChannelCreate}\n                component={OpenChannelCreateScreen}\n              />\n            </RootStack.Group>\n\n            <RootStack.Group\n              screenOptions={{\n                animation: \"slide_from_bottom\",\n                headerShown: false,\n              }}\n            >\n              <RootStack.Screen\n                name={Routes.FileViewer}\n                component={FileViewerScreen}\n              />\n            </RootStack.Group>\n\n            <RootStack.Group screenOptions={{ headerShown: true }}>\n              <RootStack.Screen\n                name={Routes.ThemeColors}\n                component={ThemeColorsScreen}\n              />\n              <RootStack.Screen\n                name={Routes.Palette}\n                component={PaletteScreen}\n              />\n            </RootStack.Group>\n          </>\n        )}\n      </RootStack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport {LogBox} from 'react-native';\nimport {Logger} from '@sendbird/uikit-utils';\nimport AppRoot from './src/App';\nimport {withAppearance} from './src/hooks/useAppearance';\nimport './src/libs/notification';\n\n// Sendbird.setLogLevel(Sendbird.LogLevel.DEBUG);\nLogger.setLogLevel('warn');\nLogBox.ignoreLogs(['UIKit Warning', \"Warning: Can't perform\", 'FileViewer > params.deleteMessage (Function)']);\n\nconst App = withAppearance(AppRoot);\n\nexport default App;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"256\":\"24f80afe\",\"356\":\"c8f8f5ee\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var inProgress = {};\nvar dataWebpackPrefix = \"web:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/sendbird-uikit-sample-react-native-expo/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [801], () => (__webpack_require__(23095)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["AppSendbirdSDK","APP_ID","GetSendbirdSDK","SetSendbirdSDK","sdk","RootStack","createNativeStackNavigator","NotificationService","createExpoNotificationService","ExpoNotifications","ClipboardService","createExpoClipboardService","ExpoClipboard","FileService","createExpoFileService","fsModule","ExpoFS","imagePickerModule","ExpoImagePicker","mediaLibraryModule","ExpoMediaLibrary","documentPickerModule","ExpoDocumentPicker","MediaService","createExpoMediaService","avModule","ExpoAV","thumbnailModule","ExpoVideoThumbnail","imageManipulator","ExpoImageManipulator","GetTranslucent","state","arguments","length","undefined","Platform","StatusBar","ios","android","SendbirdAPI","appId","apiToken","fetcher","client","axios","baseURL","headers","interceptors","response","use","res","data","createSendbirdFetcher","getSessionToken","userId","expires_at","Date","now","post","createSendbirdAPI","DEFAULT_APPEARANCE","AppearanceContext","createContext","scheme","setScheme","NOOP","SchemeManager","KEY","get","_get","_asyncToGenerator","_ref","_yield$AsyncStorage$g","AsyncStorage","Appearance","apply","set","_set","_x","AppearanceProvider","_ref2","_Appearance$getColorS","children","_useState","useState","_useState2","_slicedToArray","useAsyncLayoutEffect","_jsx","Provider","value","_setScheme2","_x2","useContext","Routes","authManager","credStorage","internal","cred","hasAuthentication","Boolean","getAuthentication","_getAuthentication","authenticate","deAuthenticate","delete","createAuthManager","CredentialStorage","_classCallCheck","STORAGE_KEY","_createClass","key","this","JSON","parse","stringify","useAppAuth","onAutonomousSignIn","loading","setLoading","then","finally","signIn","signOut","navigationRef","createNavigationContainerRef","navigationActions","navigate","name","params","isReady","currentRoute","getCurrentRoute","dispatch","StackActions","push","goBack","Notifications","handleNotification","_handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","onForeground","onNotification","notification","_notification$notific","_notification$notific2","_notification$notific3","request","content","isSendbirdNotification","sendbird","parseSendbirdNotification","callback","id","setInterval","connectionState","clearInterval","runAfterAppReady","_","actions","_navigationRef$getCur","channelUrl","channel","channel_url","Home","GroupChannelTabs","GroupChannel","checkAppOpenedWithNotification","remove","importance","BACKGROUND_NOTIFICATION_TASK","TaskManager","defineTask","_ref3","console","log","_sendbird$sender","identifier","String","message_id","title","sender","body","message","trigger","getContrastColor","color","startsWith","_color$replace$split$","replace","split","map","c","Number","_color$replace$split$2","r","g","b","_color$replace","_color$replace2","r1","r2","g1","g2","b1","b2","convHex","hex1","hex2","parseInt","Error","findColorNameFromPalette","palette","targetHex","Object","entries","find","_useUIKitTheme","useUIKitTheme","colors","colorScheme","select","fontColor","light","dark","bgColor","SafeAreaView","_jsxs","ScrollView","Text","style","backgroundColor","textAlign","paddingVertical","parseColors","flavor","colorName","View","height","justifyContent","paddingHorizontal","useAppNavigation","navigation","useNavigation","useRoute","styles","StyleSheet","container","flex","viewContainer","userInfoContainer","alignItems","avatarContainer","marginBottom","userIdContainer","userIdLabel","_useAppearance","useAppearance","_useSafeAreaInsets","useSafeAreaInsets","left","right","_useSendbirdChat","useSendbirdChat","currentUser","updateCurrentUserInfo","_usePushTrigger","usePushTrigger","option","updateOption","fileService","usePlatformService","STRINGS","useLocalization","toast","useToast","openSheet","useBottomSheet","openPrompt","usePrompt","openMenu","useActionMenu","alert","useAlert","onChangeNickname","_currentUser$nickname","submitLabel","placeholder","defaultValue","nickname","onSubmit","_onSubmit","user","onChangeProfileImage","menuItems","onPress","_onPress","photo","openCamera","mediaType","onOpenFailure","error","code","SBUError","DIALOG","ALERT_PERMISSIONS_TITLE","ALERT_PERMISSIONS_MESSAGE","LABELS","PERMISSION_CAMERA","buttons","text","ALERT_PERMISSIONS_OK","SBUUtils","show","TOAST","OPEN_CAMERA_ERROR","_onPress2","files","openMediaLibrary","selectionLimit","PERMISSION_DEVICE_STORAGE","OPEN_PHOTO_LIBRARY_ERROR","onToggleDisturb","isNextOff","onToggleTheme","isNextDark","onExitToHome","icon","actionItem","Switch","onChangeValue","iconBackgroundColor","secondary400","error300","Header","primary","onPressRight","sheetItems","background","contentContainerStyle","paddingLeft","paddingRight","Avatar","uri","plainProfileUrl","size","containerStyle","h1","numberOfLines","Divider","body2","onBackground02","body3","menu","MenuBar","variant","disabled","actionLabel","GroupChannelListFragment","createGroupChannelListFragment","_useAppNavigation","useEffect","setTimeout","onPressCreateChannel","channelType","GroupChannelCreate","onPressChannel","url","Tab","createBottomTabNavigator","typography","totalUnreadMessages","useTotalUnreadMessageCount","Navigator","initialRouteName","GroupChannelList","screenOptions","headerShown","tabBarActiveTintColor","tabBarLabelStyle","caption2","Screen","component","GroupChannelListScreen","initialParams","options","tabBarLabel","tabBarBadge","tabBarIcon","Icon","Settings","SettingsScreen","GroupChannelFragment","createGroupChannelFragment","useGroupChannel","searchItem","onPressMediaMessage","fileMessage","deleteMessage","FileViewer","serializedFileMessage","serialize","onChannelDeleted","onPressHeaderLeft","onPressHeaderRight","GroupChannelSettings","GroupChannelSettingsFragment","createGroupChannelSettingsFragment","onPressMenuModeration","GroupChannelModeration","onPressMenuSearchInChannel","MessageSearch","onPressMenuMembers","GroupChannelMembers","onPressMenuLeaveChannel","onPressMenuNotification","GroupChannelNotifications","GroupChannelCreateFragment","createGroupChannelCreateFragment","onBeforeCreateChannel","channelParams","onCreateChannel","GroupChannelInviteFragment","createGroupChannelInviteFragment","onInviteMembers","GroupChannelMembersFragment","createGroupChannelMembersFragment","GroupChannelInvite","GroupChannelModerationFragment","createGroupChannelModerationFragment","onPressMenuOperators","GroupChannelOperators","onPressMenuMutedMembers","GroupChannelMutedMembers","onPressMenuBannedUsers","GroupChannelBannedUsers","GroupChannelOperatorsFragment","createGroupChannelOperatorsFragment","GroupChannelRegisterOperator","GroupChannelRegisterOperatorFragment","createGroupChannelRegisterOperatorFragment","GroupChannelMutedMembersFragment","createGroupChannelMutedMembersFragment","GroupChannelBannedUsersFragment","createGroupChannelBannedUsersFragment","GroupChannelNotificationsFragment","createGroupChannelNotificationsFragment","OpenChannelCustomType","parseStreamData","_unused","OpenChannelListFragment","createOpenChannelListFragment","HeaderComponent","useHeaderStyle","OpenChannelCreate","OpenChannel","queryCreator","openChannel","createOpenChannelListQuery","customTypes","COMMUNITY","BasicOpenChannelListModule","createOpenChannelListModule","List","props","Box","paddingTop","paddingBottom","_objectSpread","LiveStreamPreview","streamData","_useUIKitTheme2","flexDirection","width","onBackground04","Image","resizeMode","source","live_channel_url","borderRadius","position","bottom","caption1","onBackgroundDark01","participantCount","marginLeft","flexShrink","thumbnail_url","marginRight","subtitle1","onBackground01","creator_info","tags","slice","tag","navigateToOpenChannel","OpenChannelLiveStream","LIVE","renderOpenChannelPreview","useCallback","PressBox","flatListProps","bounces","onRefresh","OpenChannelListLiveStreams","lazy","OpenChannelListLiveStreamsScreen","OpenChannelListCommunity","OpenChannelListCommunityScreen","OpenChannelFragment","createOpenChannelFragment","useOpenChannel","customType","includes","OpenChannelTabs","onPressHeaderRightWithSettings","OpenChannelSettings","onPressHeaderRightWithParticipants","OpenChannelParticipants","useIsLandscape","_useWindowDimensions","useWindowDimensions","StreamView","topInset","isLandscape","forceUpdate","useForceUpdate","useChannelHandler","onChannelParticipantCountChanged","streamInfoPosition","overlay02","activeOpacity","top","button","rightIconName","OpenChannelContexts","clearTitleMargin","clearStatusBarTopInset","titleContainer","avatarGroup","_Header","h2","subtitle","createStyleSheet","maxWidth","marginTop","_useAppNavigation2","streamViewHeight","keyboardAvoidOffset","OpenChannelParticipantsFragment","createOpenChannelParticipantsFragment","OpenChannelSettingsFragment","createOpenChannelSettingsFragment","OpenChannelModeration","onPressMenuParticipants","onPressMenuDeleteChannel","onNavigateToOpenChannel","OpenChannelCreateFragment","createOpenChannelCreateFragment","OpenChannelModerationFragment","createOpenChannelModerationFragment","OpenChannelOperators","onPressMenuMutedParticipants","OpenChannelMutedParticipants","OpenChannelBannedUsers","OpenChannelBannedUsersFragment","createOpenChannelBannedUsersFragment","OpenChannelMutedMembersFragment","createOpenChannelMutedParticipantsFragment","OpenChannelOperatorsFragment","createOpenChannelOperatorsFragment","OpenChannelRegisterOperator","OpenChannelRegisterOperatorFragment","createOpenChannelRegisterOperatorFragment","buildMessageFromSerializedData","onClose","MessageSearchFragment","createMessageSearchFragment","onPressSearchResultItem","startingPoint","createdAt","chat","SendbirdChat","uikit","SendbirdUIKit","version","fontSize","versions","useVersions","logo","fontWeight","btn","input","setUserId","_useState3","_useState4","setNickname","connect","useConnection","connectWith","sessionHandler","SessionHandler","onSessionTokenRequired","onSuccess","onFail","token","catch","setSessionHandler","accessToken","_useAppAuth","require","TextInput","onChangeText","Button","Versions","elevation","shadowColor","shadowOpacity","shadowOffset","shadowRadius","infoContainer","padding","infoText","infoImage","borderBottomLeftRadius","borderBottomRightRadius","desc","image","Pressable","HomeItems","route","Palette","ThemeColors","list","screenTitle","separator","divider","marginVertical","customSampleButton","footer","disconnect","FlatList","keyExtractor","k","ItemSeparatorComponent","renderItem","item","HomeListItem","Alert","ListHeaderComponent","ListFooterComponent","SectionList","maxHeight","stickySectionHeadersEnabled","sections","stack","errorInfo","componentStack","renderSectionHeader","section","reset","Navigations","isLightTheme","unsubscribe","AppState","count","groupChannel","getTotalUnreadMessageCount","NavigationContainer","ref","theme","DefaultTheme","DarkTheme","_Fragment","HomeScreen","Group","GroupChannelScreen","GroupChannelSettingsScreen","GroupChannelNotificationsScreen","GroupChannelMembersScreen","GroupChannelModerationScreen","GroupChannelMutedMembersScreen","GroupChannelBannedUsersScreen","GroupChannelOperatorsScreen","GroupChannelRegisterOperatorScreen","GroupChannelCreateScreen","GroupChannelInviteScreen","MessageSearchScreen","OpenChannelScreen","OpenChannelLiveStreamScreen","OpenChannelSettingsScreen","OpenChannelParticipantsScreen","OpenChannelModerationScreen","OpenChannelMutedParticipantsScreen","OpenChannelBannedUsersScreen","OpenChannelOperatorsScreen","OpenChannelRegisterOperatorScreen","OpenChannelCreateScreen","animation","FileViewerScreen","ThemeColorsScreen","PaletteScreen","SignIn","SignInScreen","SendbirdUIKitContainer","chatOptions","localCacheStorage","onInitialized","enableAutoPushTokenRegistration","enableChannelListTypingIndicator","enableChannelListMessageReceiptStatus","enableUserMention","enableMessageSearch","platformServices","file","clipboard","media","defaultHeaderTitleAlign","LightUIKitTheme","DarkUIKitTheme","statusBarTranslucent","errorBoundary","ErrorInfoComponent","ErrorInfoScreen","userProfile","isGroupChannel","isOpenChannel","Component","Logger","LogBox","AppRoot","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","keys","every","splice","n","getter","__esModule","d","a","leafPrototypes","getProto","getPrototypeOf","obj","t","mode","ns","create","def","current","indexOf","getOwnPropertyNames","forEach","definition","o","defineProperty","enumerable","f","e","chunkId","Promise","all","reduce","promises","u","miniCssF","globalThis","Function","window","prop","prototype","hasOwnProperty","inProgress","dataWebpackPrefix","l","done","script","needAttach","scripts","document","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","src","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","bind","type","target","head","appendChild","Symbol","toStringTag","p","installedChunks","installedChunkData","promise","resolve","reject","errorType","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}